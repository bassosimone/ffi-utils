// Part of Measurement Kit <https://measurement-kit.github.io/>.
// Measurement Kit is free software under the BSD license. See AUTHORS
// and LICENSE for more information on the copying conditions. */

#include <measurement_kit/ffi/ffi.h>

#include <nlohmann/json.hpp>

struct mk_task_ {
  // NOTHING
};

struct mk_event_ : public nlohmann::json {
  using nlohmann::json::json;
};

const char *mk_event_serialize(mk_event_t *event) noexcept {
  return event->dump().c_str();
}

void mk_event_destroy(mk_event_t *event) noexcept {
  delete event;
}

mk_task_t *mk_task_start(const char *settings) MK_FFI_NOEXCEPT;

/** @brief Enumerates the possible error codes returned by
   the mk_task_start_ex() factory function. */
enum mk_task_error_t {
    /** @brief MK_TASK_ENONE indicates that no error occurred. */
    MK_TASK_ENONE = 0,
    /** @brief MK_TASK_EPARSE indicates that we could not parse the settings
        string provided in input as a valid JSON. */
    MK_TASK_EPARSE,
    /** @brief MK_TASK_EGENERIC indicates any other error. */
    MK_TASK_EGENERIC
};

/**
    @brief Starts a task with the specified JSON settings.

    @param task Pointer to pointer to the task. `*task` will contain a valid
    task on success. On failure, `*task` will be `NULL`.

    @param settings Task settings.

    @return MK_TASK_EGENERIC if either @p task or @p settings are `NULL`.

    @return MK_TASK_EPARSE if @p settings cannot be parsed.

    @return MK_TASK_EGENERIC in case of other, unlikely, errors.

    @return MK_TASK_ENONE on success.

    @remark you should consider @p task to contain a valid pointer, that you own
    and must mk_task_destroy(), only in the MK_TASK_ENONE case.

    @see <a href="https://github.com/measurement-kit/measurement-kit/blob/master/include/measurement_kit/README.md">
    the FFI API specification</a> for more information on @p settings.
*/
enum mk_task_error_t mk_task_start_ex(
        mk_task_t **task, const char *settings) MK_FFI_NOEXCEPT;

/**
    @brief Returns the next event emitted by @p task.

    @param task The task for which you want events. This may be a NULL
    pointer. In such case, the code will return the dummy event usually
    returned when a task is done (a NULL task is always done). Also in
    that case, you _of course_ own the returned event pointer (the fact
    that the event is dummy does not mean that it has not been allocated).

    @return A valid event pointer on success.

    @return NULL on failure.

    @remark If the task has done running, a special dummy event will be
    returned as described in the FFI API specification.

    @see <a href="https://github.com/measurement-kit/measurement-kit/blob/master/include/measurement_kit/README.md">
    the FFI API specification</a> for more information on @p settings.

    @remark You own the returned event pointer and must call mk_event_destroy()
    to free the allocated resources when done with the event.

    @remark This is a blocking function that does not return until a
    new event is generated by @p task.
*/
mk_event_t *mk_task_wait_for_next_event(mk_task_t *task) MK_FFI_NOEXCEPT;

/**
    @brief Returns true if the task is done, false otherwise.

    @param task The task that you want to know whether it's done.

    @return true if @p task is done or NULL.

    @return false (i.e. `0`) otherwise.

    @remark A task is "done" when the task thread has exited and there are
    no unread events in the queue drained by mk_task_wait_for_next_event().

    @remark a NULL task will always be considered done.
*/
int mk_task_is_done(mk_task_t *task) MK_FFI_NOEXCEPT;

/**
    @brief Interrupts a task.

    @param task the Task to interrupt.

    @remark if @p task is already terminated, this function does nothing.

    @remark if @p task is NULL, this function does nothing.
*/
void mk_task_interrupt(mk_task_t *task) MK_FFI_NOEXCEPT;

/**
    @brief Waits for @p task to complete and frees resources.

    @param task The task to destroy.

    @remark if @p task is NULL, this function does nothing.

    @remark calling this function multiple times on the same @p task
    is a double free memory error with undefined consequences.
*/
void mk_task_destroy(mk_task_t *task) MK_FFI_NOEXCEPT;

#ifdef __cplusplus
}
#endif

/**
    @}
    @mainpage Measurement Kit API

    This is is Measurement Kit documentation generated using Doxygen. It
    documents in details the exported functions, classes, parameters, and
    return values. We encourage you to also read our
    <a href="https://github.com/measurement-kit/measurement-kit/blob/master/include/measurement_kit/README.md">
    top-level API specification</a> to get a better sense of the high
    level design of Measurement Kit APIs.
*/
#endif /* MEASUREMENT_KIT_FFI_FFI_H */
