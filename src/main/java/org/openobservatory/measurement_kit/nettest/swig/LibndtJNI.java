/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.openobservatory.measurement_kit.nettest.swig;

public class LibndtJNI {
  public final static native long new_MapStringString__SWIG_0();
  public final static native long new_MapStringString__SWIG_1(long jarg1, MapStringString jarg1_);
  public final static native long MapStringString_size(long jarg1, MapStringString jarg1_);
  public final static native boolean MapStringString_empty(long jarg1, MapStringString jarg1_);
  public final static native void MapStringString_clear(long jarg1, MapStringString jarg1_);
  public final static native String MapStringString_get(long jarg1, MapStringString jarg1_, String jarg2);
  public final static native void MapStringString_set(long jarg1, MapStringString jarg1_, String jarg2, String jarg3);
  public final static native void MapStringString_del(long jarg1, MapStringString jarg1_, String jarg2);
  public final static native boolean MapStringString_has_key(long jarg1, MapStringString jarg1_, String jarg2);
  public final static native void delete_MapStringString(long jarg1);
  public final static native long new_VectorString__SWIG_0();
  public final static native long new_VectorString__SWIG_1(long jarg1);
  public final static native long VectorString_size(long jarg1, VectorString jarg1_);
  public final static native long VectorString_capacity(long jarg1, VectorString jarg1_);
  public final static native void VectorString_reserve(long jarg1, VectorString jarg1_, long jarg2);
  public final static native boolean VectorString_isEmpty(long jarg1, VectorString jarg1_);
  public final static native void VectorString_clear(long jarg1, VectorString jarg1_);
  public final static native void VectorString_add(long jarg1, VectorString jarg1_, String jarg2);
  public final static native String VectorString_get(long jarg1, VectorString jarg1_, int jarg2);
  public final static native void VectorString_set(long jarg1, VectorString jarg1_, int jarg2, String jarg3);
  public final static native void delete_VectorString(long jarg1);
  public final static native void FailureASNLookupEvent_failure_set(long jarg1, FailureASNLookupEvent jarg1_, String jarg2);
  public final static native String FailureASNLookupEvent_failure_get(long jarg1, FailureASNLookupEvent jarg1_);
  public final static native long new_FailureASNLookupEvent();
  public final static native void delete_FailureASNLookupEvent(long jarg1);
  public final static native void StatusUpdatePerformanceEvent_direction_set(long jarg1, StatusUpdatePerformanceEvent jarg1_, String jarg2);
  public final static native String StatusUpdatePerformanceEvent_direction_get(long jarg1, StatusUpdatePerformanceEvent jarg1_);
  public final static native void StatusUpdatePerformanceEvent_elapsed_set(long jarg1, StatusUpdatePerformanceEvent jarg1_, double jarg2);
  public final static native double StatusUpdatePerformanceEvent_elapsed_get(long jarg1, StatusUpdatePerformanceEvent jarg1_);
  public final static native void StatusUpdatePerformanceEvent_num_streams_set(long jarg1, StatusUpdatePerformanceEvent jarg1_, long jarg2);
  public final static native long StatusUpdatePerformanceEvent_num_streams_get(long jarg1, StatusUpdatePerformanceEvent jarg1_);
  public final static native void StatusUpdatePerformanceEvent_speed_kbps_set(long jarg1, StatusUpdatePerformanceEvent jarg1_, double jarg2);
  public final static native double StatusUpdatePerformanceEvent_speed_kbps_get(long jarg1, StatusUpdatePerformanceEvent jarg1_);
  public final static native long new_StatusUpdatePerformanceEvent();
  public final static native void delete_StatusUpdatePerformanceEvent(long jarg1);
  public final static native void Options_bouncer_base_url_set(long jarg1, Options jarg1_, String jarg2);
  public final static native String Options_bouncer_base_url_get(long jarg1, Options jarg1_);
  public final static native void Options_dns_name_server_set(long jarg1, Options jarg1_, String jarg2);
  public final static native String Options_dns_name_server_get(long jarg1, Options jarg1_);
  public final static native void Options_ignore_bouncer_error_set(long jarg1, Options jarg1_, boolean jarg2);
  public final static native boolean Options_ignore_bouncer_error_get(long jarg1, Options jarg1_);
  public final static native void Options_max_runtime_set(long jarg1, Options jarg1_, double jarg2);
  public final static native double Options_max_runtime_get(long jarg1, Options jarg1_);
  public final static native long new_Options();
  public final static native void delete_Options(long jarg1);
  public final static native void Settings_annotations_set(long jarg1, Settings jarg1_, long jarg2, MapStringString jarg2_);
  public final static native long Settings_annotations_get(long jarg1, Settings jarg1_);
  public final static native void Settings_disabled_events_set(long jarg1, Settings jarg1_, long jarg2, VectorString jarg2_);
  public final static native long Settings_disabled_events_get(long jarg1, Settings jarg1_);
  public final static native void Settings_name_set(long jarg1, Settings jarg1_, String jarg2);
  public final static native String Settings_name_get(long jarg1, Settings jarg1_);
  public final static native void Settings_options_set(long jarg1, Settings jarg1_, long jarg2, Options jarg2_);
  public final static native long Settings_options_get(long jarg1, Settings jarg1_);
  public final static native long new_Settings();
  public final static native void delete_Settings(long jarg1);
  public final static native void Nettest_on_failure_asn_lookup(long jarg1, Nettest jarg1_, long jarg2, FailureASNLookupEvent jarg2_);
  public final static native void Nettest_on_failure_asn_lookupSwigExplicitNettest(long jarg1, Nettest jarg1_, long jarg2, FailureASNLookupEvent jarg2_);
  public final static native void Nettest_on_status_update_performance(long jarg1, Nettest jarg1_, long jarg2, StatusUpdatePerformanceEvent jarg2_);
  public final static native void Nettest_on_status_update_performanceSwigExplicitNettest(long jarg1, Nettest jarg1_, long jarg2, StatusUpdatePerformanceEvent jarg2_);
  public final static native long new_Nettest__SWIG_0();
  public final static native long new_Nettest__SWIG_1(long jarg1, Settings jarg1_);
  public final static native void Nettest_run(long jarg1, Nettest jarg1_);
  public final static native void delete_Nettest(long jarg1);
  public final static native void Nettest_director_connect(Nettest obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void Nettest_change_ownership(Nettest obj, long cptr, boolean take_or_release);
  public final static native long new_TaskDeleter();
  public final static native void delete_TaskDeleter(long jarg1);
  public final static native long new_EventDeleter();
  public final static native void delete_EventDeleter(long jarg1);

  public static void SwigDirector_Nettest_on_failure_asn_lookup(Nettest jself, long arg0) {
    jself.on_failure_asn_lookup(new FailureASNLookupEvent(arg0, false));
  }
  public static void SwigDirector_Nettest_on_status_update_performance(Nettest jself, long arg0) {
    jself.on_status_update_performance(new StatusUpdatePerformanceEvent(arg0, false));
  }

  private final static native void swig_module_init();
  static {
    swig_module_init();
  }
}
