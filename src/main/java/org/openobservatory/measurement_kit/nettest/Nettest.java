// Autogenerated by measurement-kit/ffi tools; DO NOT EDIT!

package org.openobservatory.measurement_kit.nettest;

public class Nettest {
  public void on_failure_asn_lookup(FailureASNLookupEvent event) {
    // TODO: override
  }

  public void on_status_update_performance(StatusUpdatePerformanceEvent event) {
    // TODO: override
  }

  public Nettest() {}

  public Nettest(Settings s) {
    settings_ = s;
  }

  public void run() {
    org.openobservatory.measurement_kit.nettest.swig.Settings swigSettings = new org.openobservatory.measurement_kit.nettest.swig.Settings();
    {
      {
        org.openobservatory.measurement_kit.nettest.swig.MapStringString mss = new org.openobservatory.measurement_kit.nettest.swig.MapStringString();
        for (String key : settings_.annotations.keySet()) {
          String value = settings_.annotations.get(key);
          mss.set(key, value);
        }
        swigSettings.setAnnotations(mss);
      }
      {
        org.openobservatory.measurement_kit.nettest.swig.VectorString vs = new org.openobservatory.measurement_kit.nettest.swig.VectorString();
        for (String entry : settings_.disabled_events) {
          vs.add(entry);
        }
        swigSettings.setDisabled_events(vs);
      }
      swigSettings.setName(settings_.name);
    }
    {
      org.openobservatory.measurement_kit.nettest.swig.Options swigOptions = new org.openobservatory.measurement_kit.nettest.swig.Options();
      swigOptions.setBouncer_base_url(settings_.options.bouncer_base_url);
      swigOptions.setDns_name_server(settings_.options.dns_name_server);
      swigOptions.setIgnore_bouncer_error(settings_.options.ignore_bouncer_error);
      swigOptions.setMax_runtime(settings_.options.max_runtime);
      // <function name_to_mkname at 0x10b79f7d0> name_to_mkname
      swigSettings.setOptions(swigOptions);
    }
    NettestWrapper wrapper = new NettestWrapper(this, swigSettings);
    wrapper.run();
  }

  private Settings settings_ = new Settings();
}
