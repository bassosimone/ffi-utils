/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package io.ooni.mk.nettest.swig;

public class Runner {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected Runner(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(Runner obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        MkNettestJNI.delete_Runner(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  protected void swigDirectorDisconnect() {
    swigCMemOwn = false;
    delete();
  }

  public void swigReleaseOwnership() {
    swigCMemOwn = false;
    MkNettestJNI.Runner_change_ownership(this, swigCPtr, false);
  }

  public void swigTakeOwnership() {
    swigCMemOwn = true;
    MkNettestJNI.Runner_change_ownership(this, swigCPtr, true);
  }

  public void on_failure_asn_lookup(FailureAsnLookup arg0) {
    if (getClass() == Runner.class) MkNettestJNI.Runner_on_failure_asn_lookup(swigCPtr, this, FailureAsnLookup.getCPtr(arg0), arg0); else MkNettestJNI.Runner_on_failure_asn_lookupSwigExplicitRunner(swigCPtr, this, FailureAsnLookup.getCPtr(arg0), arg0);
  }

  public void on_failure_cc_lookup(FailureCcLookup arg0) {
    if (getClass() == Runner.class) MkNettestJNI.Runner_on_failure_cc_lookup(swigCPtr, this, FailureCcLookup.getCPtr(arg0), arg0); else MkNettestJNI.Runner_on_failure_cc_lookupSwigExplicitRunner(swigCPtr, this, FailureCcLookup.getCPtr(arg0), arg0);
  }

  public void on_failure_ip_lookup(FailureIpLookup arg0) {
    if (getClass() == Runner.class) MkNettestJNI.Runner_on_failure_ip_lookup(swigCPtr, this, FailureIpLookup.getCPtr(arg0), arg0); else MkNettestJNI.Runner_on_failure_ip_lookupSwigExplicitRunner(swigCPtr, this, FailureIpLookup.getCPtr(arg0), arg0);
  }

  public void on_failure_measurement(FailureMeasurement arg0) {
    if (getClass() == Runner.class) MkNettestJNI.Runner_on_failure_measurement(swigCPtr, this, FailureMeasurement.getCPtr(arg0), arg0); else MkNettestJNI.Runner_on_failure_measurementSwigExplicitRunner(swigCPtr, this, FailureMeasurement.getCPtr(arg0), arg0);
  }

  public void on_failure_measurement_submission(FailureMeasurementSubmission arg0) {
    if (getClass() == Runner.class) MkNettestJNI.Runner_on_failure_measurement_submission(swigCPtr, this, FailureMeasurementSubmission.getCPtr(arg0), arg0); else MkNettestJNI.Runner_on_failure_measurement_submissionSwigExplicitRunner(swigCPtr, this, FailureMeasurementSubmission.getCPtr(arg0), arg0);
  }

  public void on_failure_report_create(FailureReportCreate arg0) {
    if (getClass() == Runner.class) MkNettestJNI.Runner_on_failure_report_create(swigCPtr, this, FailureReportCreate.getCPtr(arg0), arg0); else MkNettestJNI.Runner_on_failure_report_createSwigExplicitRunner(swigCPtr, this, FailureReportCreate.getCPtr(arg0), arg0);
  }

  public void on_failure_report_close(FailureReportClose arg0) {
    if (getClass() == Runner.class) MkNettestJNI.Runner_on_failure_report_close(swigCPtr, this, FailureReportClose.getCPtr(arg0), arg0); else MkNettestJNI.Runner_on_failure_report_closeSwigExplicitRunner(swigCPtr, this, FailureReportClose.getCPtr(arg0), arg0);
  }

  public void on_failure_resolver_lookup(FailureResolverLookup arg0) {
    if (getClass() == Runner.class) MkNettestJNI.Runner_on_failure_resolver_lookup(swigCPtr, this, FailureResolverLookup.getCPtr(arg0), arg0); else MkNettestJNI.Runner_on_failure_resolver_lookupSwigExplicitRunner(swigCPtr, this, FailureResolverLookup.getCPtr(arg0), arg0);
  }

  public void on_failure_startup(FailureStartup arg0) {
    if (getClass() == Runner.class) MkNettestJNI.Runner_on_failure_startup(swigCPtr, this, FailureStartup.getCPtr(arg0), arg0); else MkNettestJNI.Runner_on_failure_startupSwigExplicitRunner(swigCPtr, this, FailureStartup.getCPtr(arg0), arg0);
  }

  public void on_log(Log arg0) {
    if (getClass() == Runner.class) MkNettestJNI.Runner_on_log(swigCPtr, this, Log.getCPtr(arg0), arg0); else MkNettestJNI.Runner_on_logSwigExplicitRunner(swigCPtr, this, Log.getCPtr(arg0), arg0);
  }

  public void on_measurement(Measurement arg0) {
    if (getClass() == Runner.class) MkNettestJNI.Runner_on_measurement(swigCPtr, this, Measurement.getCPtr(arg0), arg0); else MkNettestJNI.Runner_on_measurementSwigExplicitRunner(swigCPtr, this, Measurement.getCPtr(arg0), arg0);
  }

  public void on_status_end(StatusEnd arg0) {
    if (getClass() == Runner.class) MkNettestJNI.Runner_on_status_end(swigCPtr, this, StatusEnd.getCPtr(arg0), arg0); else MkNettestJNI.Runner_on_status_endSwigExplicitRunner(swigCPtr, this, StatusEnd.getCPtr(arg0), arg0);
  }

  public void on_status_geoip_lookup(StatusGeoipLookup arg0) {
    if (getClass() == Runner.class) MkNettestJNI.Runner_on_status_geoip_lookup(swigCPtr, this, StatusGeoipLookup.getCPtr(arg0), arg0); else MkNettestJNI.Runner_on_status_geoip_lookupSwigExplicitRunner(swigCPtr, this, StatusGeoipLookup.getCPtr(arg0), arg0);
  }

  public void on_status_progress(StatusProgress arg0) {
    if (getClass() == Runner.class) MkNettestJNI.Runner_on_status_progress(swigCPtr, this, StatusProgress.getCPtr(arg0), arg0); else MkNettestJNI.Runner_on_status_progressSwigExplicitRunner(swigCPtr, this, StatusProgress.getCPtr(arg0), arg0);
  }

  public void on_status_queued(StatusQueued arg0) {
    if (getClass() == Runner.class) MkNettestJNI.Runner_on_status_queued(swigCPtr, this, StatusQueued.getCPtr(arg0), arg0); else MkNettestJNI.Runner_on_status_queuedSwigExplicitRunner(swigCPtr, this, StatusQueued.getCPtr(arg0), arg0);
  }

  public void on_status_measurement_start(StatusMeasurementStart arg0) {
    if (getClass() == Runner.class) MkNettestJNI.Runner_on_status_measurement_start(swigCPtr, this, StatusMeasurementStart.getCPtr(arg0), arg0); else MkNettestJNI.Runner_on_status_measurement_startSwigExplicitRunner(swigCPtr, this, StatusMeasurementStart.getCPtr(arg0), arg0);
  }

  public void on_status_measurement_submission(StatusMeasurementSubmission arg0) {
    if (getClass() == Runner.class) MkNettestJNI.Runner_on_status_measurement_submission(swigCPtr, this, StatusMeasurementSubmission.getCPtr(arg0), arg0); else MkNettestJNI.Runner_on_status_measurement_submissionSwigExplicitRunner(swigCPtr, this, StatusMeasurementSubmission.getCPtr(arg0), arg0);
  }

  public void on_status_measurement_done(StatusMeasurementDone arg0) {
    if (getClass() == Runner.class) MkNettestJNI.Runner_on_status_measurement_done(swigCPtr, this, StatusMeasurementDone.getCPtr(arg0), arg0); else MkNettestJNI.Runner_on_status_measurement_doneSwigExplicitRunner(swigCPtr, this, StatusMeasurementDone.getCPtr(arg0), arg0);
  }

  public void on_status_report_close(StatusReportClose arg0) {
    if (getClass() == Runner.class) MkNettestJNI.Runner_on_status_report_close(swigCPtr, this, StatusReportClose.getCPtr(arg0), arg0); else MkNettestJNI.Runner_on_status_report_closeSwigExplicitRunner(swigCPtr, this, StatusReportClose.getCPtr(arg0), arg0);
  }

  public void on_status_report_create(StatusReportCreate arg0) {
    if (getClass() == Runner.class) MkNettestJNI.Runner_on_status_report_create(swigCPtr, this, StatusReportCreate.getCPtr(arg0), arg0); else MkNettestJNI.Runner_on_status_report_createSwigExplicitRunner(swigCPtr, this, StatusReportCreate.getCPtr(arg0), arg0);
  }

  public void on_status_resolver_lookup(StatusResolverLookup arg0) {
    if (getClass() == Runner.class) MkNettestJNI.Runner_on_status_resolver_lookup(swigCPtr, this, StatusResolverLookup.getCPtr(arg0), arg0); else MkNettestJNI.Runner_on_status_resolver_lookupSwigExplicitRunner(swigCPtr, this, StatusResolverLookup.getCPtr(arg0), arg0);
  }

  public void on_status_started(StatusStarted arg0) {
    if (getClass() == Runner.class) MkNettestJNI.Runner_on_status_started(swigCPtr, this, StatusStarted.getCPtr(arg0), arg0); else MkNettestJNI.Runner_on_status_startedSwigExplicitRunner(swigCPtr, this, StatusStarted.getCPtr(arg0), arg0);
  }

  public void on_status_update_performance(StatusUpdatePerformance arg0) {
    if (getClass() == Runner.class) MkNettestJNI.Runner_on_status_update_performance(swigCPtr, this, StatusUpdatePerformance.getCPtr(arg0), arg0); else MkNettestJNI.Runner_on_status_update_performanceSwigExplicitRunner(swigCPtr, this, StatusUpdatePerformance.getCPtr(arg0), arg0);
  }

  public void on_status_update_websites(StatusUpdateWebsites arg0) {
    if (getClass() == Runner.class) MkNettestJNI.Runner_on_status_update_websites(swigCPtr, this, StatusUpdateWebsites.getCPtr(arg0), arg0); else MkNettestJNI.Runner_on_status_update_websitesSwigExplicitRunner(swigCPtr, this, StatusUpdateWebsites.getCPtr(arg0), arg0);
  }

  public void on_task_terminated(TaskTerminated arg0) {
    if (getClass() == Runner.class) MkNettestJNI.Runner_on_task_terminated(swigCPtr, this, TaskTerminated.getCPtr(arg0), arg0); else MkNettestJNI.Runner_on_task_terminatedSwigExplicitRunner(swigCPtr, this, TaskTerminated.getCPtr(arg0), arg0);
  }

  public String prepare_captive_portal(CaptivePortal settings) {
    return MkNettestJNI.Runner_prepare_captive_portal(swigCPtr, this, CaptivePortal.getCPtr(settings), settings);
  }

  public String prepare_dash(Dash settings) {
    return MkNettestJNI.Runner_prepare_dash(swigCPtr, this, Dash.getCPtr(settings), settings);
  }

  public String prepare_dns_injection(DnsInjection settings) {
    return MkNettestJNI.Runner_prepare_dns_injection(swigCPtr, this, DnsInjection.getCPtr(settings), settings);
  }

  public String prepare_facebook_messenger(FacebookMessenger settings) {
    return MkNettestJNI.Runner_prepare_facebook_messenger(swigCPtr, this, FacebookMessenger.getCPtr(settings), settings);
  }

  public String prepare_http_header_field_manipulation(HttpHeaderFieldManipulation settings) {
    return MkNettestJNI.Runner_prepare_http_header_field_manipulation(swigCPtr, this, HttpHeaderFieldManipulation.getCPtr(settings), settings);
  }

  public String prepare_http_invalid_request_line(HttpInvalidRequestLine settings) {
    return MkNettestJNI.Runner_prepare_http_invalid_request_line(swigCPtr, this, HttpInvalidRequestLine.getCPtr(settings), settings);
  }

  public String prepare_meek_fronted_requests(MeekFrontedRequests settings) {
    return MkNettestJNI.Runner_prepare_meek_fronted_requests(swigCPtr, this, MeekFrontedRequests.getCPtr(settings), settings);
  }

  public String prepare_multi_ndt(MultiNdt settings) {
    return MkNettestJNI.Runner_prepare_multi_ndt(swigCPtr, this, MultiNdt.getCPtr(settings), settings);
  }

  public String prepare_ndt(Ndt settings) {
    return MkNettestJNI.Runner_prepare_ndt(swigCPtr, this, Ndt.getCPtr(settings), settings);
  }

  public String prepare_tcp_connect(TcpConnect settings) {
    return MkNettestJNI.Runner_prepare_tcp_connect(swigCPtr, this, TcpConnect.getCPtr(settings), settings);
  }

  public String prepare_telegram(Telegram settings) {
    return MkNettestJNI.Runner_prepare_telegram(swigCPtr, this, Telegram.getCPtr(settings), settings);
  }

  public String prepare_web_connectivity(WebConnectivity settings) {
    return MkNettestJNI.Runner_prepare_web_connectivity(swigCPtr, this, WebConnectivity.getCPtr(settings), settings);
  }

  public String prepare_whatsapp(Whatsapp settings) {
    return MkNettestJNI.Runner_prepare_whatsapp(swigCPtr, this, Whatsapp.getCPtr(settings), settings);
  }

  public void run(String s) {
    MkNettestJNI.Runner_run(swigCPtr, this, s);
  }

  public Runner() {
    this(MkNettestJNI.new_Runner(), true);
    MkNettestJNI.Runner_director_connect(this, swigCPtr, swigCMemOwn, true);
  }

}
