/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package io.ooni.mk.nettest.swig;

public class MkNettestJNI {
  public final static native long new_MapStringString__SWIG_0();
  public final static native long new_MapStringString__SWIG_1(long jarg1, MapStringString jarg1_);
  public final static native long MapStringString_size(long jarg1, MapStringString jarg1_);
  public final static native boolean MapStringString_empty(long jarg1, MapStringString jarg1_);
  public final static native void MapStringString_clear(long jarg1, MapStringString jarg1_);
  public final static native String MapStringString_get(long jarg1, MapStringString jarg1_, String jarg2);
  public final static native void MapStringString_set(long jarg1, MapStringString jarg1_, String jarg2, String jarg3);
  public final static native void MapStringString_del(long jarg1, MapStringString jarg1_, String jarg2);
  public final static native boolean MapStringString_has_key(long jarg1, MapStringString jarg1_, String jarg2);
  public final static native void delete_MapStringString(long jarg1);
  public final static native long new_VectorString__SWIG_0();
  public final static native long new_VectorString__SWIG_1(long jarg1);
  public final static native long VectorString_size(long jarg1, VectorString jarg1_);
  public final static native long VectorString_capacity(long jarg1, VectorString jarg1_);
  public final static native void VectorString_reserve(long jarg1, VectorString jarg1_, long jarg2);
  public final static native boolean VectorString_isEmpty(long jarg1, VectorString jarg1_);
  public final static native void VectorString_clear(long jarg1, VectorString jarg1_);
  public final static native void VectorString_add(long jarg1, VectorString jarg1_, String jarg2);
  public final static native String VectorString_get(long jarg1, VectorString jarg1_, int jarg2);
  public final static native void VectorString_set(long jarg1, VectorString jarg1_, int jarg2, String jarg3);
  public final static native void delete_VectorString(long jarg1);
  public final static native String FailureAsnLookup_key_get();
  public final static native void FailureAsnLookup_failure_set(long jarg1, FailureAsnLookup jarg1_, String jarg2);
  public final static native String FailureAsnLookup_failure_get(long jarg1, FailureAsnLookup jarg1_);
  public final static native long new_FailureAsnLookup();
  public final static native void delete_FailureAsnLookup(long jarg1);
  public final static native String FailureCcLookup_key_get();
  public final static native void FailureCcLookup_failure_set(long jarg1, FailureCcLookup jarg1_, String jarg2);
  public final static native String FailureCcLookup_failure_get(long jarg1, FailureCcLookup jarg1_);
  public final static native long new_FailureCcLookup();
  public final static native void delete_FailureCcLookup(long jarg1);
  public final static native String FailureIpLookup_key_get();
  public final static native void FailureIpLookup_failure_set(long jarg1, FailureIpLookup jarg1_, String jarg2);
  public final static native String FailureIpLookup_failure_get(long jarg1, FailureIpLookup jarg1_);
  public final static native long new_FailureIpLookup();
  public final static native void delete_FailureIpLookup(long jarg1);
  public final static native String FailureMeasurement_key_get();
  public final static native void FailureMeasurement_failure_set(long jarg1, FailureMeasurement jarg1_, String jarg2);
  public final static native String FailureMeasurement_failure_get(long jarg1, FailureMeasurement jarg1_);
  public final static native long new_FailureMeasurement();
  public final static native void delete_FailureMeasurement(long jarg1);
  public final static native String FailureMeasurementSubmission_key_get();
  public final static native void FailureMeasurementSubmission_failure_set(long jarg1, FailureMeasurementSubmission jarg1_, String jarg2);
  public final static native String FailureMeasurementSubmission_failure_get(long jarg1, FailureMeasurementSubmission jarg1_);
  public final static native void FailureMeasurementSubmission_idx_set(long jarg1, FailureMeasurementSubmission jarg1_, long jarg2);
  public final static native long FailureMeasurementSubmission_idx_get(long jarg1, FailureMeasurementSubmission jarg1_);
  public final static native void FailureMeasurementSubmission_json_str_set(long jarg1, FailureMeasurementSubmission jarg1_, String jarg2);
  public final static native String FailureMeasurementSubmission_json_str_get(long jarg1, FailureMeasurementSubmission jarg1_);
  public final static native long new_FailureMeasurementSubmission();
  public final static native void delete_FailureMeasurementSubmission(long jarg1);
  public final static native String FailureReportCreate_key_get();
  public final static native void FailureReportCreate_failure_set(long jarg1, FailureReportCreate jarg1_, String jarg2);
  public final static native String FailureReportCreate_failure_get(long jarg1, FailureReportCreate jarg1_);
  public final static native long new_FailureReportCreate();
  public final static native void delete_FailureReportCreate(long jarg1);
  public final static native String FailureReportClose_key_get();
  public final static native void FailureReportClose_failure_set(long jarg1, FailureReportClose jarg1_, String jarg2);
  public final static native String FailureReportClose_failure_get(long jarg1, FailureReportClose jarg1_);
  public final static native long new_FailureReportClose();
  public final static native void delete_FailureReportClose(long jarg1);
  public final static native String FailureResolverLookup_key_get();
  public final static native void FailureResolverLookup_failure_set(long jarg1, FailureResolverLookup jarg1_, String jarg2);
  public final static native String FailureResolverLookup_failure_get(long jarg1, FailureResolverLookup jarg1_);
  public final static native long new_FailureResolverLookup();
  public final static native void delete_FailureResolverLookup(long jarg1);
  public final static native String FailureStartup_key_get();
  public final static native void FailureStartup_failure_set(long jarg1, FailureStartup jarg1_, String jarg2);
  public final static native String FailureStartup_failure_get(long jarg1, FailureStartup jarg1_);
  public final static native long new_FailureStartup();
  public final static native void delete_FailureStartup(long jarg1);
  public final static native String Log_key_get();
  public final static native void Log_log_level_set(long jarg1, Log jarg1_, String jarg2);
  public final static native String Log_log_level_get(long jarg1, Log jarg1_);
  public final static native void Log_message_set(long jarg1, Log jarg1_, String jarg2);
  public final static native String Log_message_get(long jarg1, Log jarg1_);
  public final static native long new_Log();
  public final static native void delete_Log(long jarg1);
  public final static native String Measurement_key_get();
  public final static native void Measurement_idx_set(long jarg1, Measurement jarg1_, long jarg2);
  public final static native long Measurement_idx_get(long jarg1, Measurement jarg1_);
  public final static native void Measurement_json_str_set(long jarg1, Measurement jarg1_, String jarg2);
  public final static native String Measurement_json_str_get(long jarg1, Measurement jarg1_);
  public final static native long new_Measurement();
  public final static native void delete_Measurement(long jarg1);
  public final static native String StatusEnd_key_get();
  public final static native void StatusEnd_downloaded_kb_set(long jarg1, StatusEnd jarg1_, double jarg2);
  public final static native double StatusEnd_downloaded_kb_get(long jarg1, StatusEnd jarg1_);
  public final static native void StatusEnd_uploaded_kb_set(long jarg1, StatusEnd jarg1_, double jarg2);
  public final static native double StatusEnd_uploaded_kb_get(long jarg1, StatusEnd jarg1_);
  public final static native void StatusEnd_failure_set(long jarg1, StatusEnd jarg1_, String jarg2);
  public final static native String StatusEnd_failure_get(long jarg1, StatusEnd jarg1_);
  public final static native long new_StatusEnd();
  public final static native void delete_StatusEnd(long jarg1);
  public final static native String StatusGeoipLookup_key_get();
  public final static native void StatusGeoipLookup_probe_ip_set(long jarg1, StatusGeoipLookup jarg1_, String jarg2);
  public final static native String StatusGeoipLookup_probe_ip_get(long jarg1, StatusGeoipLookup jarg1_);
  public final static native void StatusGeoipLookup_probe_asn_set(long jarg1, StatusGeoipLookup jarg1_, String jarg2);
  public final static native String StatusGeoipLookup_probe_asn_get(long jarg1, StatusGeoipLookup jarg1_);
  public final static native void StatusGeoipLookup_probe_cc_set(long jarg1, StatusGeoipLookup jarg1_, String jarg2);
  public final static native String StatusGeoipLookup_probe_cc_get(long jarg1, StatusGeoipLookup jarg1_);
  public final static native void StatusGeoipLookup_probe_network_name_set(long jarg1, StatusGeoipLookup jarg1_, String jarg2);
  public final static native String StatusGeoipLookup_probe_network_name_get(long jarg1, StatusGeoipLookup jarg1_);
  public final static native long new_StatusGeoipLookup();
  public final static native void delete_StatusGeoipLookup(long jarg1);
  public final static native String StatusProgress_key_get();
  public final static native void StatusProgress_percentage_set(long jarg1, StatusProgress jarg1_, double jarg2);
  public final static native double StatusProgress_percentage_get(long jarg1, StatusProgress jarg1_);
  public final static native void StatusProgress_message_set(long jarg1, StatusProgress jarg1_, String jarg2);
  public final static native String StatusProgress_message_get(long jarg1, StatusProgress jarg1_);
  public final static native long new_StatusProgress();
  public final static native void delete_StatusProgress(long jarg1);
  public final static native String StatusQueued_key_get();
  public final static native long new_StatusQueued();
  public final static native void delete_StatusQueued(long jarg1);
  public final static native String StatusMeasurementStart_key_get();
  public final static native void StatusMeasurementStart_idx_set(long jarg1, StatusMeasurementStart jarg1_, long jarg2);
  public final static native long StatusMeasurementStart_idx_get(long jarg1, StatusMeasurementStart jarg1_);
  public final static native void StatusMeasurementStart_input_set(long jarg1, StatusMeasurementStart jarg1_, String jarg2);
  public final static native String StatusMeasurementStart_input_get(long jarg1, StatusMeasurementStart jarg1_);
  public final static native long new_StatusMeasurementStart();
  public final static native void delete_StatusMeasurementStart(long jarg1);
  public final static native String StatusMeasurementSubmission_key_get();
  public final static native void StatusMeasurementSubmission_idx_set(long jarg1, StatusMeasurementSubmission jarg1_, long jarg2);
  public final static native long StatusMeasurementSubmission_idx_get(long jarg1, StatusMeasurementSubmission jarg1_);
  public final static native long new_StatusMeasurementSubmission();
  public final static native void delete_StatusMeasurementSubmission(long jarg1);
  public final static native String StatusMeasurementDone_key_get();
  public final static native void StatusMeasurementDone_idx_set(long jarg1, StatusMeasurementDone jarg1_, long jarg2);
  public final static native long StatusMeasurementDone_idx_get(long jarg1, StatusMeasurementDone jarg1_);
  public final static native long new_StatusMeasurementDone();
  public final static native void delete_StatusMeasurementDone(long jarg1);
  public final static native String StatusReportClose_key_get();
  public final static native void StatusReportClose_report_id_set(long jarg1, StatusReportClose jarg1_, String jarg2);
  public final static native String StatusReportClose_report_id_get(long jarg1, StatusReportClose jarg1_);
  public final static native long new_StatusReportClose();
  public final static native void delete_StatusReportClose(long jarg1);
  public final static native String StatusReportCreate_key_get();
  public final static native void StatusReportCreate_report_id_set(long jarg1, StatusReportCreate jarg1_, String jarg2);
  public final static native String StatusReportCreate_report_id_get(long jarg1, StatusReportCreate jarg1_);
  public final static native long new_StatusReportCreate();
  public final static native void delete_StatusReportCreate(long jarg1);
  public final static native String StatusResolverLookup_key_get();
  public final static native void StatusResolverLookup_ip_address_set(long jarg1, StatusResolverLookup jarg1_, String jarg2);
  public final static native String StatusResolverLookup_ip_address_get(long jarg1, StatusResolverLookup jarg1_);
  public final static native long new_StatusResolverLookup();
  public final static native void delete_StatusResolverLookup(long jarg1);
  public final static native String StatusStarted_key_get();
  public final static native long new_StatusStarted();
  public final static native void delete_StatusStarted(long jarg1);
  public final static native String StatusUpdatePerformance_key_get();
  public final static native void StatusUpdatePerformance_direction_set(long jarg1, StatusUpdatePerformance jarg1_, String jarg2);
  public final static native String StatusUpdatePerformance_direction_get(long jarg1, StatusUpdatePerformance jarg1_);
  public final static native void StatusUpdatePerformance_elapsed_set(long jarg1, StatusUpdatePerformance jarg1_, double jarg2);
  public final static native double StatusUpdatePerformance_elapsed_get(long jarg1, StatusUpdatePerformance jarg1_);
  public final static native void StatusUpdatePerformance_num_streams_set(long jarg1, StatusUpdatePerformance jarg1_, long jarg2);
  public final static native long StatusUpdatePerformance_num_streams_get(long jarg1, StatusUpdatePerformance jarg1_);
  public final static native void StatusUpdatePerformance_speed_kbps_set(long jarg1, StatusUpdatePerformance jarg1_, double jarg2);
  public final static native double StatusUpdatePerformance_speed_kbps_get(long jarg1, StatusUpdatePerformance jarg1_);
  public final static native long new_StatusUpdatePerformance();
  public final static native void delete_StatusUpdatePerformance(long jarg1);
  public final static native String StatusUpdateWebsites_key_get();
  public final static native void StatusUpdateWebsites_url_set(long jarg1, StatusUpdateWebsites jarg1_, String jarg2);
  public final static native String StatusUpdateWebsites_url_get(long jarg1, StatusUpdateWebsites jarg1_);
  public final static native void StatusUpdateWebsites_status_set(long jarg1, StatusUpdateWebsites jarg1_, String jarg2);
  public final static native String StatusUpdateWebsites_status_get(long jarg1, StatusUpdateWebsites jarg1_);
  public final static native long new_StatusUpdateWebsites();
  public final static native void delete_StatusUpdateWebsites(long jarg1);
  public final static native String TaskTerminated_key_get();
  public final static native long new_TaskTerminated();
  public final static native void delete_TaskTerminated(long jarg1);
  public final static native String Common_log_level_err_get();
  public final static native String Common_log_level_warning_get();
  public final static native String Common_log_level_info_get();
  public final static native String Common_log_level_debug_get();
  public final static native String Common_log_level_debug2_get();
  public final static native void Common_annotations_set(long jarg1, Common jarg1_, long jarg2, MapStringString jarg2_);
  public final static native long Common_annotations_get(long jarg1, Common jarg1_);
  public final static native void Common_disabled_events_set(long jarg1, Common jarg1_, long jarg2, VectorString jarg2_);
  public final static native long Common_disabled_events_get(long jarg1, Common jarg1_);
  public final static native void Common_inputs_set(long jarg1, Common jarg1_, long jarg2, VectorString jarg2_);
  public final static native long Common_inputs_get(long jarg1, Common jarg1_);
  public final static native void Common_input_filepaths_set(long jarg1, Common jarg1_, long jarg2, VectorString jarg2_);
  public final static native long Common_input_filepaths_get(long jarg1, Common jarg1_);
  public final static native void Common_log_filepath_set(long jarg1, Common jarg1_, String jarg2);
  public final static native String Common_log_filepath_get(long jarg1, Common jarg1_);
  public final static native void Common_log_level_set(long jarg1, Common jarg1_, String jarg2);
  public final static native String Common_log_level_get(long jarg1, Common jarg1_);
  public final static native void Common_output_filepath_set(long jarg1, Common jarg1_, String jarg2);
  public final static native String Common_output_filepath_get(long jarg1, Common jarg1_);
  public final static native void Common_bouncer_base_url_set(long jarg1, Common jarg1_, String jarg2);
  public final static native String Common_bouncer_base_url_get(long jarg1, Common jarg1_);
  public final static native void Common_collector_base_url_set(long jarg1, Common jarg1_, String jarg2);
  public final static native String Common_collector_base_url_get(long jarg1, Common jarg1_);
  public final static native void Common_dns_nameserver_set(long jarg1, Common jarg1_, String jarg2);
  public final static native String Common_dns_nameserver_get(long jarg1, Common jarg1_);
  public final static native void Common_dns_engine_set(long jarg1, Common jarg1_, String jarg2);
  public final static native String Common_dns_engine_get(long jarg1, Common jarg1_);
  public final static native void Common_geoip_asn_path_set(long jarg1, Common jarg1_, String jarg2);
  public final static native String Common_geoip_asn_path_get(long jarg1, Common jarg1_);
  public final static native void Common_geoip_country_path_set(long jarg1, Common jarg1_, String jarg2);
  public final static native String Common_geoip_country_path_get(long jarg1, Common jarg1_);
  public final static native void Common_ignore_bouncer_error_set(long jarg1, Common jarg1_, boolean jarg2);
  public final static native boolean Common_ignore_bouncer_error_get(long jarg1, Common jarg1_);
  public final static native void Common_ignore_open_report_error_set(long jarg1, Common jarg1_, boolean jarg2);
  public final static native boolean Common_ignore_open_report_error_get(long jarg1, Common jarg1_);
  public final static native void Common_max_runtime_set(long jarg1, Common jarg1_, double jarg2);
  public final static native double Common_max_runtime_get(long jarg1, Common jarg1_);
  public final static native void Common_net_ca_bundle_path_set(long jarg1, Common jarg1_, String jarg2);
  public final static native String Common_net_ca_bundle_path_get(long jarg1, Common jarg1_);
  public final static native void Common_net_timeout_set(long jarg1, Common jarg1_, double jarg2);
  public final static native double Common_net_timeout_get(long jarg1, Common jarg1_);
  public final static native void Common_no_bouncer_set(long jarg1, Common jarg1_, boolean jarg2);
  public final static native boolean Common_no_bouncer_get(long jarg1, Common jarg1_);
  public final static native void Common_no_collector_set(long jarg1, Common jarg1_, boolean jarg2);
  public final static native boolean Common_no_collector_get(long jarg1, Common jarg1_);
  public final static native void Common_no_asn_lookup_set(long jarg1, Common jarg1_, boolean jarg2);
  public final static native boolean Common_no_asn_lookup_get(long jarg1, Common jarg1_);
  public final static native void Common_no_cc_lookup_set(long jarg1, Common jarg1_, boolean jarg2);
  public final static native boolean Common_no_cc_lookup_get(long jarg1, Common jarg1_);
  public final static native void Common_no_ip_lookup_set(long jarg1, Common jarg1_, boolean jarg2);
  public final static native boolean Common_no_ip_lookup_get(long jarg1, Common jarg1_);
  public final static native void Common_no_file_report_set(long jarg1, Common jarg1_, boolean jarg2);
  public final static native boolean Common_no_file_report_get(long jarg1, Common jarg1_);
  public final static native void Common_no_resolver_lookup_set(long jarg1, Common jarg1_, boolean jarg2);
  public final static native boolean Common_no_resolver_lookup_get(long jarg1, Common jarg1_);
  public final static native void Common_probe_asn_set(long jarg1, Common jarg1_, String jarg2);
  public final static native String Common_probe_asn_get(long jarg1, Common jarg1_);
  public final static native void Common_probe_cc_set(long jarg1, Common jarg1_, String jarg2);
  public final static native String Common_probe_cc_get(long jarg1, Common jarg1_);
  public final static native void Common_probe_ip_set(long jarg1, Common jarg1_, String jarg2);
  public final static native String Common_probe_ip_get(long jarg1, Common jarg1_);
  public final static native void Common_randomize_input_set(long jarg1, Common jarg1_, boolean jarg2);
  public final static native boolean Common_randomize_input_get(long jarg1, Common jarg1_);
  public final static native void Common_save_real_probe_asn_set(long jarg1, Common jarg1_, boolean jarg2);
  public final static native boolean Common_save_real_probe_asn_get(long jarg1, Common jarg1_);
  public final static native void Common_save_real_probe_cc_set(long jarg1, Common jarg1_, boolean jarg2);
  public final static native boolean Common_save_real_probe_cc_get(long jarg1, Common jarg1_);
  public final static native void Common_save_real_probe_ip_set(long jarg1, Common jarg1_, boolean jarg2);
  public final static native boolean Common_save_real_probe_ip_get(long jarg1, Common jarg1_);
  public final static native void Common_save_real_resolver_ip_set(long jarg1, Common jarg1_, boolean jarg2);
  public final static native boolean Common_save_real_resolver_ip_get(long jarg1, Common jarg1_);
  public final static native void Common_software_name_set(long jarg1, Common jarg1_, String jarg2);
  public final static native String Common_software_name_get(long jarg1, Common jarg1_);
  public final static native void Common_software_version_set(long jarg1, Common jarg1_, String jarg2);
  public final static native String Common_software_version_get(long jarg1, Common jarg1_);
  public final static native long new_Common();
  public final static native void delete_Common(long jarg1);
  public final static native boolean CaptivePortal_needs_input_get();
  public final static native long new_CaptivePortal();
  public final static native void delete_CaptivePortal(long jarg1);
  public final static native boolean Dash_needs_input_get();
  public final static native long new_Dash();
  public final static native void delete_Dash(long jarg1);
  public final static native boolean DnsInjection_needs_input_get();
  public final static native long new_DnsInjection();
  public final static native void delete_DnsInjection(long jarg1);
  public final static native boolean FacebookMessenger_needs_input_get();
  public final static native long new_FacebookMessenger();
  public final static native void delete_FacebookMessenger(long jarg1);
  public final static native boolean HttpHeaderFieldManipulation_needs_input_get();
  public final static native long new_HttpHeaderFieldManipulation();
  public final static native void delete_HttpHeaderFieldManipulation(long jarg1);
  public final static native boolean HttpInvalidRequestLine_needs_input_get();
  public final static native long new_HttpInvalidRequestLine();
  public final static native void delete_HttpInvalidRequestLine(long jarg1);
  public final static native boolean MeekFrontedRequests_needs_input_get();
  public final static native long new_MeekFrontedRequests();
  public final static native void delete_MeekFrontedRequests(long jarg1);
  public final static native boolean MultiNdt_needs_input_get();
  public final static native long new_MultiNdt();
  public final static native void delete_MultiNdt(long jarg1);
  public final static native boolean Ndt_needs_input_get();
  public final static native long new_Ndt();
  public final static native void delete_Ndt(long jarg1);
  public final static native boolean TcpConnect_needs_input_get();
  public final static native long new_TcpConnect();
  public final static native void delete_TcpConnect(long jarg1);
  public final static native boolean Telegram_needs_input_get();
  public final static native long new_Telegram();
  public final static native void delete_Telegram(long jarg1);
  public final static native boolean WebConnectivity_needs_input_get();
  public final static native long new_WebConnectivity();
  public final static native void delete_WebConnectivity(long jarg1);
  public final static native boolean Whatsapp_needs_input_get();
  public final static native void Whatsapp_all_endpoints_set(long jarg1, Whatsapp jarg1_, boolean jarg2);
  public final static native boolean Whatsapp_all_endpoints_get(long jarg1, Whatsapp jarg1_);
  public final static native long new_Whatsapp();
  public final static native void delete_Whatsapp(long jarg1);
  public final static native void Runner_on_failure_asn_lookup(long jarg1, Runner jarg1_, long jarg2, FailureAsnLookup jarg2_);
  public final static native void Runner_on_failure_asn_lookupSwigExplicitRunner(long jarg1, Runner jarg1_, long jarg2, FailureAsnLookup jarg2_);
  public final static native void Runner_on_failure_cc_lookup(long jarg1, Runner jarg1_, long jarg2, FailureCcLookup jarg2_);
  public final static native void Runner_on_failure_cc_lookupSwigExplicitRunner(long jarg1, Runner jarg1_, long jarg2, FailureCcLookup jarg2_);
  public final static native void Runner_on_failure_ip_lookup(long jarg1, Runner jarg1_, long jarg2, FailureIpLookup jarg2_);
  public final static native void Runner_on_failure_ip_lookupSwigExplicitRunner(long jarg1, Runner jarg1_, long jarg2, FailureIpLookup jarg2_);
  public final static native void Runner_on_failure_measurement(long jarg1, Runner jarg1_, long jarg2, FailureMeasurement jarg2_);
  public final static native void Runner_on_failure_measurementSwigExplicitRunner(long jarg1, Runner jarg1_, long jarg2, FailureMeasurement jarg2_);
  public final static native void Runner_on_failure_measurement_submission(long jarg1, Runner jarg1_, long jarg2, FailureMeasurementSubmission jarg2_);
  public final static native void Runner_on_failure_measurement_submissionSwigExplicitRunner(long jarg1, Runner jarg1_, long jarg2, FailureMeasurementSubmission jarg2_);
  public final static native void Runner_on_failure_report_create(long jarg1, Runner jarg1_, long jarg2, FailureReportCreate jarg2_);
  public final static native void Runner_on_failure_report_createSwigExplicitRunner(long jarg1, Runner jarg1_, long jarg2, FailureReportCreate jarg2_);
  public final static native void Runner_on_failure_report_close(long jarg1, Runner jarg1_, long jarg2, FailureReportClose jarg2_);
  public final static native void Runner_on_failure_report_closeSwigExplicitRunner(long jarg1, Runner jarg1_, long jarg2, FailureReportClose jarg2_);
  public final static native void Runner_on_failure_resolver_lookup(long jarg1, Runner jarg1_, long jarg2, FailureResolverLookup jarg2_);
  public final static native void Runner_on_failure_resolver_lookupSwigExplicitRunner(long jarg1, Runner jarg1_, long jarg2, FailureResolverLookup jarg2_);
  public final static native void Runner_on_failure_startup(long jarg1, Runner jarg1_, long jarg2, FailureStartup jarg2_);
  public final static native void Runner_on_failure_startupSwigExplicitRunner(long jarg1, Runner jarg1_, long jarg2, FailureStartup jarg2_);
  public final static native void Runner_on_log(long jarg1, Runner jarg1_, long jarg2, Log jarg2_);
  public final static native void Runner_on_logSwigExplicitRunner(long jarg1, Runner jarg1_, long jarg2, Log jarg2_);
  public final static native void Runner_on_measurement(long jarg1, Runner jarg1_, long jarg2, Measurement jarg2_);
  public final static native void Runner_on_measurementSwigExplicitRunner(long jarg1, Runner jarg1_, long jarg2, Measurement jarg2_);
  public final static native void Runner_on_status_end(long jarg1, Runner jarg1_, long jarg2, StatusEnd jarg2_);
  public final static native void Runner_on_status_endSwigExplicitRunner(long jarg1, Runner jarg1_, long jarg2, StatusEnd jarg2_);
  public final static native void Runner_on_status_geoip_lookup(long jarg1, Runner jarg1_, long jarg2, StatusGeoipLookup jarg2_);
  public final static native void Runner_on_status_geoip_lookupSwigExplicitRunner(long jarg1, Runner jarg1_, long jarg2, StatusGeoipLookup jarg2_);
  public final static native void Runner_on_status_progress(long jarg1, Runner jarg1_, long jarg2, StatusProgress jarg2_);
  public final static native void Runner_on_status_progressSwigExplicitRunner(long jarg1, Runner jarg1_, long jarg2, StatusProgress jarg2_);
  public final static native void Runner_on_status_queued(long jarg1, Runner jarg1_, long jarg2, StatusQueued jarg2_);
  public final static native void Runner_on_status_queuedSwigExplicitRunner(long jarg1, Runner jarg1_, long jarg2, StatusQueued jarg2_);
  public final static native void Runner_on_status_measurement_start(long jarg1, Runner jarg1_, long jarg2, StatusMeasurementStart jarg2_);
  public final static native void Runner_on_status_measurement_startSwigExplicitRunner(long jarg1, Runner jarg1_, long jarg2, StatusMeasurementStart jarg2_);
  public final static native void Runner_on_status_measurement_submission(long jarg1, Runner jarg1_, long jarg2, StatusMeasurementSubmission jarg2_);
  public final static native void Runner_on_status_measurement_submissionSwigExplicitRunner(long jarg1, Runner jarg1_, long jarg2, StatusMeasurementSubmission jarg2_);
  public final static native void Runner_on_status_measurement_done(long jarg1, Runner jarg1_, long jarg2, StatusMeasurementDone jarg2_);
  public final static native void Runner_on_status_measurement_doneSwigExplicitRunner(long jarg1, Runner jarg1_, long jarg2, StatusMeasurementDone jarg2_);
  public final static native void Runner_on_status_report_close(long jarg1, Runner jarg1_, long jarg2, StatusReportClose jarg2_);
  public final static native void Runner_on_status_report_closeSwigExplicitRunner(long jarg1, Runner jarg1_, long jarg2, StatusReportClose jarg2_);
  public final static native void Runner_on_status_report_create(long jarg1, Runner jarg1_, long jarg2, StatusReportCreate jarg2_);
  public final static native void Runner_on_status_report_createSwigExplicitRunner(long jarg1, Runner jarg1_, long jarg2, StatusReportCreate jarg2_);
  public final static native void Runner_on_status_resolver_lookup(long jarg1, Runner jarg1_, long jarg2, StatusResolverLookup jarg2_);
  public final static native void Runner_on_status_resolver_lookupSwigExplicitRunner(long jarg1, Runner jarg1_, long jarg2, StatusResolverLookup jarg2_);
  public final static native void Runner_on_status_started(long jarg1, Runner jarg1_, long jarg2, StatusStarted jarg2_);
  public final static native void Runner_on_status_startedSwigExplicitRunner(long jarg1, Runner jarg1_, long jarg2, StatusStarted jarg2_);
  public final static native void Runner_on_status_update_performance(long jarg1, Runner jarg1_, long jarg2, StatusUpdatePerformance jarg2_);
  public final static native void Runner_on_status_update_performanceSwigExplicitRunner(long jarg1, Runner jarg1_, long jarg2, StatusUpdatePerformance jarg2_);
  public final static native void Runner_on_status_update_websites(long jarg1, Runner jarg1_, long jarg2, StatusUpdateWebsites jarg2_);
  public final static native void Runner_on_status_update_websitesSwigExplicitRunner(long jarg1, Runner jarg1_, long jarg2, StatusUpdateWebsites jarg2_);
  public final static native void Runner_on_task_terminated(long jarg1, Runner jarg1_, long jarg2, TaskTerminated jarg2_);
  public final static native void Runner_on_task_terminatedSwigExplicitRunner(long jarg1, Runner jarg1_, long jarg2, TaskTerminated jarg2_);
  public final static native void Runner_run_captive_portal(long jarg1, Runner jarg1_, long jarg2, CaptivePortal jarg2_);
  public final static native void Runner_run_dash(long jarg1, Runner jarg1_, long jarg2, Dash jarg2_);
  public final static native void Runner_run_dns_injection(long jarg1, Runner jarg1_, long jarg2, DnsInjection jarg2_);
  public final static native void Runner_run_facebook_messenger(long jarg1, Runner jarg1_, long jarg2, FacebookMessenger jarg2_);
  public final static native void Runner_run_http_header_field_manipulation(long jarg1, Runner jarg1_, long jarg2, HttpHeaderFieldManipulation jarg2_);
  public final static native void Runner_run_http_invalid_request_line(long jarg1, Runner jarg1_, long jarg2, HttpInvalidRequestLine jarg2_);
  public final static native void Runner_run_meek_fronted_requests(long jarg1, Runner jarg1_, long jarg2, MeekFrontedRequests jarg2_);
  public final static native void Runner_run_multi_ndt(long jarg1, Runner jarg1_, long jarg2, MultiNdt jarg2_);
  public final static native void Runner_run_ndt(long jarg1, Runner jarg1_, long jarg2, Ndt jarg2_);
  public final static native void Runner_run_tcp_connect(long jarg1, Runner jarg1_, long jarg2, TcpConnect jarg2_);
  public final static native void Runner_run_telegram(long jarg1, Runner jarg1_, long jarg2, Telegram jarg2_);
  public final static native void Runner_run_web_connectivity(long jarg1, Runner jarg1_, long jarg2, WebConnectivity jarg2_);
  public final static native void Runner_run_whatsapp(long jarg1, Runner jarg1_, long jarg2, Whatsapp jarg2_);
  public final static native long new_Runner();
  public final static native void delete_Runner(long jarg1);
  public final static native void Runner_director_connect(Runner obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void Runner_change_ownership(Runner obj, long cptr, boolean take_or_release);
  public final static native long CaptivePortal_SWIGUpcast(long jarg1);
  public final static native long Dash_SWIGUpcast(long jarg1);
  public final static native long DnsInjection_SWIGUpcast(long jarg1);
  public final static native long FacebookMessenger_SWIGUpcast(long jarg1);
  public final static native long HttpHeaderFieldManipulation_SWIGUpcast(long jarg1);
  public final static native long HttpInvalidRequestLine_SWIGUpcast(long jarg1);
  public final static native long MeekFrontedRequests_SWIGUpcast(long jarg1);
  public final static native long MultiNdt_SWIGUpcast(long jarg1);
  public final static native long Ndt_SWIGUpcast(long jarg1);
  public final static native long TcpConnect_SWIGUpcast(long jarg1);
  public final static native long Telegram_SWIGUpcast(long jarg1);
  public final static native long WebConnectivity_SWIGUpcast(long jarg1);
  public final static native long Whatsapp_SWIGUpcast(long jarg1);

  public static void SwigDirector_Runner_on_failure_asn_lookup(Runner jself, long arg0) {
    jself.on_failure_asn_lookup(new FailureAsnLookup(arg0, false));
  }
  public static void SwigDirector_Runner_on_failure_cc_lookup(Runner jself, long arg0) {
    jself.on_failure_cc_lookup(new FailureCcLookup(arg0, false));
  }
  public static void SwigDirector_Runner_on_failure_ip_lookup(Runner jself, long arg0) {
    jself.on_failure_ip_lookup(new FailureIpLookup(arg0, false));
  }
  public static void SwigDirector_Runner_on_failure_measurement(Runner jself, long arg0) {
    jself.on_failure_measurement(new FailureMeasurement(arg0, false));
  }
  public static void SwigDirector_Runner_on_failure_measurement_submission(Runner jself, long arg0) {
    jself.on_failure_measurement_submission(new FailureMeasurementSubmission(arg0, false));
  }
  public static void SwigDirector_Runner_on_failure_report_create(Runner jself, long arg0) {
    jself.on_failure_report_create(new FailureReportCreate(arg0, false));
  }
  public static void SwigDirector_Runner_on_failure_report_close(Runner jself, long arg0) {
    jself.on_failure_report_close(new FailureReportClose(arg0, false));
  }
  public static void SwigDirector_Runner_on_failure_resolver_lookup(Runner jself, long arg0) {
    jself.on_failure_resolver_lookup(new FailureResolverLookup(arg0, false));
  }
  public static void SwigDirector_Runner_on_failure_startup(Runner jself, long arg0) {
    jself.on_failure_startup(new FailureStartup(arg0, false));
  }
  public static void SwigDirector_Runner_on_log(Runner jself, long arg0) {
    jself.on_log(new Log(arg0, false));
  }
  public static void SwigDirector_Runner_on_measurement(Runner jself, long arg0) {
    jself.on_measurement(new Measurement(arg0, false));
  }
  public static void SwigDirector_Runner_on_status_end(Runner jself, long arg0) {
    jself.on_status_end(new StatusEnd(arg0, false));
  }
  public static void SwigDirector_Runner_on_status_geoip_lookup(Runner jself, long arg0) {
    jself.on_status_geoip_lookup(new StatusGeoipLookup(arg0, false));
  }
  public static void SwigDirector_Runner_on_status_progress(Runner jself, long arg0) {
    jself.on_status_progress(new StatusProgress(arg0, false));
  }
  public static void SwigDirector_Runner_on_status_queued(Runner jself, long arg0) {
    jself.on_status_queued(new StatusQueued(arg0, false));
  }
  public static void SwigDirector_Runner_on_status_measurement_start(Runner jself, long arg0) {
    jself.on_status_measurement_start(new StatusMeasurementStart(arg0, false));
  }
  public static void SwigDirector_Runner_on_status_measurement_submission(Runner jself, long arg0) {
    jself.on_status_measurement_submission(new StatusMeasurementSubmission(arg0, false));
  }
  public static void SwigDirector_Runner_on_status_measurement_done(Runner jself, long arg0) {
    jself.on_status_measurement_done(new StatusMeasurementDone(arg0, false));
  }
  public static void SwigDirector_Runner_on_status_report_close(Runner jself, long arg0) {
    jself.on_status_report_close(new StatusReportClose(arg0, false));
  }
  public static void SwigDirector_Runner_on_status_report_create(Runner jself, long arg0) {
    jself.on_status_report_create(new StatusReportCreate(arg0, false));
  }
  public static void SwigDirector_Runner_on_status_resolver_lookup(Runner jself, long arg0) {
    jself.on_status_resolver_lookup(new StatusResolverLookup(arg0, false));
  }
  public static void SwigDirector_Runner_on_status_started(Runner jself, long arg0) {
    jself.on_status_started(new StatusStarted(arg0, false));
  }
  public static void SwigDirector_Runner_on_status_update_performance(Runner jself, long arg0) {
    jself.on_status_update_performance(new StatusUpdatePerformance(arg0, false));
  }
  public static void SwigDirector_Runner_on_status_update_websites(Runner jself, long arg0) {
    jself.on_status_update_websites(new StatusUpdateWebsites(arg0, false));
  }
  public static void SwigDirector_Runner_on_task_terminated(Runner jself, long arg0) {
    jself.on_task_terminated(new TaskTerminated(arg0, false));
  }

  private final static native void swig_module_init();
  static {
    swig_module_init();
  }
}
