// Part of Measurement Kit <https://measurement-kit.github.io/>.
// Measurement Kit is free software under the BSD license. See AUTHORS
// and LICENSE for more information on the copying conditions.

/*-
 *  __      __  _____ __________  _______  .___ _______    ________
 * /  \    /  \/  _  \\______   \ \      \ |   |\      \  /  _____/
 * \   \/\/   /  /_\  \|       _/ /   |   \|   |/   |   \/   \  ___
 *  \        /    |    \    |   \/    |    \   /    |    \    \_\  \
 *   \__/\  /\____|__  /____|_  /\____|__  /___\____|__  /\______  /
 *        \/         \/       \/         \/            \/        \/
 *
 * Autogenerated by measurement-kit/ffi-tools; DO NOT EDIT!
 *
 * See https://github.com/measurement-kit/ffi-tools for more information.
 */

package io.ooni.mk.nettest;

public class Runner {
  // Handlers
  // --------

  public void onFailureAsnLookup(io.ooni.mk.nettest.event.FailureAsnLookupEvent event) {
    // TODO: override this callback if you're interested
  }

  public void onFailureCcLookup(io.ooni.mk.nettest.event.FailureCcLookupEvent event) {
    // TODO: override this callback if you're interested
  }

  public void onFailureIpLookup(io.ooni.mk.nettest.event.FailureIpLookupEvent event) {
    // TODO: override this callback if you're interested
  }

  public void onFailureMeasurement(io.ooni.mk.nettest.event.FailureMeasurementEvent event) {
    // TODO: override this callback if you're interested
  }

  public void onFailureMeasurementSubmission(io.ooni.mk.nettest.event.FailureMeasurementSubmissionEvent event) {
    // TODO: override this callback if you're interested
  }

  public void onFailureReportCreate(io.ooni.mk.nettest.event.FailureReportCreateEvent event) {
    // TODO: override this callback if you're interested
  }

  public void onFailureReportClose(io.ooni.mk.nettest.event.FailureReportCloseEvent event) {
    // TODO: override this callback if you're interested
  }

  public void onFailureResolverLookup(io.ooni.mk.nettest.event.FailureResolverLookupEvent event) {
    // TODO: override this callback if you're interested
  }

  public void onFailureStartup(io.ooni.mk.nettest.event.FailureStartupEvent event) {
    // TODO: override this callback if you're interested
  }

  public void onLog(io.ooni.mk.nettest.event.LogEvent event) {
    // TODO: override this callback if you're interested
  }

  public void onMeasurement(io.ooni.mk.nettest.event.MeasurementEvent event) {
    // TODO: override this callback if you're interested
  }

  public void onStatusEnd(io.ooni.mk.nettest.event.StatusEndEvent event) {
    // TODO: override this callback if you're interested
  }

  public void onStatusGeoipLookup(io.ooni.mk.nettest.event.StatusGeoipLookupEvent event) {
    // TODO: override this callback if you're interested
  }

  public void onStatusProgress(io.ooni.mk.nettest.event.StatusProgressEvent event) {
    // TODO: override this callback if you're interested
  }

  public void onStatusQueued(io.ooni.mk.nettest.event.StatusQueuedEvent event) {
    // TODO: override this callback if you're interested
  }

  public void onStatusMeasurementStart(io.ooni.mk.nettest.event.StatusMeasurementStartEvent event) {
    // TODO: override this callback if you're interested
  }

  public void onStatusMeasurementSubmission(io.ooni.mk.nettest.event.StatusMeasurementSubmissionEvent event) {
    // TODO: override this callback if you're interested
  }

  public void onStatusMeasurementDone(io.ooni.mk.nettest.event.StatusMeasurementDoneEvent event) {
    // TODO: override this callback if you're interested
  }

  public void onStatusReportClose(io.ooni.mk.nettest.event.StatusReportCloseEvent event) {
    // TODO: override this callback if you're interested
  }

  public void onStatusReportCreate(io.ooni.mk.nettest.event.StatusReportCreateEvent event) {
    // TODO: override this callback if you're interested
  }

  public void onStatusResolverLookup(io.ooni.mk.nettest.event.StatusResolverLookupEvent event) {
    // TODO: override this callback if you're interested
  }

  public void onStatusStarted(io.ooni.mk.nettest.event.StatusStartedEvent event) {
    // TODO: override this callback if you're interested
  }

  public void onStatusUpdatePerformance(io.ooni.mk.nettest.event.StatusUpdatePerformanceEvent event) {
    // TODO: override this callback if you're interested
  }

  public void onStatusUpdateWebsites(io.ooni.mk.nettest.event.StatusUpdateWebsitesEvent event) {
    // TODO: override this callback if you're interested
  }

  public void onTaskTerminated(io.ooni.mk.nettest.event.TaskTerminatedEvent event) {
    // TODO: override this callback if you're interested
  }

  // Runners
  // -------

  public String prepareCaptivePortal(io.ooni.mk.nettest.settings.CaptivePortalSettings settings) {
    io.ooni.mk.nettest.swig.CaptivePortal swigSettings = new io.ooni.mk.nettest.swig.CaptivePortal();
    /* No nettest specific options. */
    setCommonOptions(settings, swigSettings);
    // Use a temporary runner for generating the serialized settings.
    io.ooni.mk.nettest.swig.Runner swigRunner = new RunnerWrapper(this);
    return swigRunner.prepare_captive_portal(swigSettings);
  }

  public String prepareDash(io.ooni.mk.nettest.settings.DashSettings settings) {
    io.ooni.mk.nettest.swig.Dash swigSettings = new io.ooni.mk.nettest.swig.Dash();
    /* No nettest specific options. */
    setCommonOptions(settings, swigSettings);
    // Use a temporary runner for generating the serialized settings.
    io.ooni.mk.nettest.swig.Runner swigRunner = new RunnerWrapper(this);
    return swigRunner.prepare_dash(swigSettings);
  }

  public String prepareDnsInjection(io.ooni.mk.nettest.settings.DnsInjectionSettings settings) {
    io.ooni.mk.nettest.swig.DnsInjection swigSettings = new io.ooni.mk.nettest.swig.DnsInjection();
    /* No nettest specific options. */
    setCommonOptions(settings, swigSettings);
    // Use a temporary runner for generating the serialized settings.
    io.ooni.mk.nettest.swig.Runner swigRunner = new RunnerWrapper(this);
    return swigRunner.prepare_dns_injection(swigSettings);
  }

  public String prepareFacebookMessenger(io.ooni.mk.nettest.settings.FacebookMessengerSettings settings) {
    io.ooni.mk.nettest.swig.FacebookMessenger swigSettings = new io.ooni.mk.nettest.swig.FacebookMessenger();
    /* No nettest specific options. */
    setCommonOptions(settings, swigSettings);
    // Use a temporary runner for generating the serialized settings.
    io.ooni.mk.nettest.swig.Runner swigRunner = new RunnerWrapper(this);
    return swigRunner.prepare_facebook_messenger(swigSettings);
  }

  public String prepareHttpHeaderFieldManipulation(io.ooni.mk.nettest.settings.HttpHeaderFieldManipulationSettings settings) {
    io.ooni.mk.nettest.swig.HttpHeaderFieldManipulation swigSettings = new io.ooni.mk.nettest.swig.HttpHeaderFieldManipulation();
    /* No nettest specific options. */
    setCommonOptions(settings, swigSettings);
    // Use a temporary runner for generating the serialized settings.
    io.ooni.mk.nettest.swig.Runner swigRunner = new RunnerWrapper(this);
    return swigRunner.prepare_http_header_field_manipulation(swigSettings);
  }

  public String prepareHttpInvalidRequestLine(io.ooni.mk.nettest.settings.HttpInvalidRequestLineSettings settings) {
    io.ooni.mk.nettest.swig.HttpInvalidRequestLine swigSettings = new io.ooni.mk.nettest.swig.HttpInvalidRequestLine();
    /* No nettest specific options. */
    setCommonOptions(settings, swigSettings);
    // Use a temporary runner for generating the serialized settings.
    io.ooni.mk.nettest.swig.Runner swigRunner = new RunnerWrapper(this);
    return swigRunner.prepare_http_invalid_request_line(swigSettings);
  }

  public String prepareMeekFrontedRequests(io.ooni.mk.nettest.settings.MeekFrontedRequestsSettings settings) {
    io.ooni.mk.nettest.swig.MeekFrontedRequests swigSettings = new io.ooni.mk.nettest.swig.MeekFrontedRequests();
    /* No nettest specific options. */
    setCommonOptions(settings, swigSettings);
    // Use a temporary runner for generating the serialized settings.
    io.ooni.mk.nettest.swig.Runner swigRunner = new RunnerWrapper(this);
    return swigRunner.prepare_meek_fronted_requests(swigSettings);
  }

  public String prepareMultiNdt(io.ooni.mk.nettest.settings.MultiNdtSettings settings) {
    io.ooni.mk.nettest.swig.MultiNdt swigSettings = new io.ooni.mk.nettest.swig.MultiNdt();
    /* No nettest specific options. */
    setCommonOptions(settings, swigSettings);
    // Use a temporary runner for generating the serialized settings.
    io.ooni.mk.nettest.swig.Runner swigRunner = new RunnerWrapper(this);
    return swigRunner.prepare_multi_ndt(swigSettings);
  }

  public String prepareNdt(io.ooni.mk.nettest.settings.NdtSettings settings) {
    io.ooni.mk.nettest.swig.Ndt swigSettings = new io.ooni.mk.nettest.swig.Ndt();
    /* No nettest specific options. */
    setCommonOptions(settings, swigSettings);
    // Use a temporary runner for generating the serialized settings.
    io.ooni.mk.nettest.swig.Runner swigRunner = new RunnerWrapper(this);
    return swigRunner.prepare_ndt(swigSettings);
  }

  public String prepareTcpConnect(io.ooni.mk.nettest.settings.TcpConnectSettings settings) {
    io.ooni.mk.nettest.swig.TcpConnect swigSettings = new io.ooni.mk.nettest.swig.TcpConnect();
    /* No nettest specific options. */
    setCommonOptions(settings, swigSettings);
    // Use a temporary runner for generating the serialized settings.
    io.ooni.mk.nettest.swig.Runner swigRunner = new RunnerWrapper(this);
    return swigRunner.prepare_tcp_connect(swigSettings);
  }

  public String prepareTelegram(io.ooni.mk.nettest.settings.TelegramSettings settings) {
    io.ooni.mk.nettest.swig.Telegram swigSettings = new io.ooni.mk.nettest.swig.Telegram();
    /* No nettest specific options. */
    setCommonOptions(settings, swigSettings);
    // Use a temporary runner for generating the serialized settings.
    io.ooni.mk.nettest.swig.Runner swigRunner = new RunnerWrapper(this);
    return swigRunner.prepare_telegram(swigSettings);
  }

  public String prepareWebConnectivity(io.ooni.mk.nettest.settings.WebConnectivitySettings settings) {
    io.ooni.mk.nettest.swig.WebConnectivity swigSettings = new io.ooni.mk.nettest.swig.WebConnectivity();
    /* No nettest specific options. */
    setCommonOptions(settings, swigSettings);
    // Use a temporary runner for generating the serialized settings.
    io.ooni.mk.nettest.swig.Runner swigRunner = new RunnerWrapper(this);
    return swigRunner.prepare_web_connectivity(swigSettings);
  }

  public String prepareWhatsapp(io.ooni.mk.nettest.settings.WhatsappSettings settings) {
    io.ooni.mk.nettest.swig.Whatsapp swigSettings = new io.ooni.mk.nettest.swig.Whatsapp();
    swigSettings.setAll_endpoints(settings.allEndpoints);
    setCommonOptions(settings, swigSettings);
    // Use a temporary runner for generating the serialized settings.
    io.ooni.mk.nettest.swig.Runner swigRunner = new RunnerWrapper(this);
    return swigRunner.prepare_whatsapp(swigSettings);
  }


  public void run(String serializedSettings) {
    io.ooni.mk.nettest.swig.Runner swigRunner = new RunnerWrapper(this);
    swigRunner.run(serializedSettings);
  }

  // Private stuff
  // -------------

  private void setCommonOptions(io.ooni.mk.nettest.settings.CommonSettings settings, io.ooni.mk.nettest.swig.Common swigSettings) {
    swigSettings.setLog_filepath(settings.logFilepath);
    swigSettings.setLog_level(settings.logLevel);
    swigSettings.setOutput_filepath(settings.outputFilepath);

    {
      io.ooni.mk.nettest.swig.MapStringString m = new io.ooni.mk.nettest.swig.MapStringString();
      for (String key : settings.annotations.keySet()) {
        String value = settings.annotations.get(key);
        m.set(key, value);
      }
      swigSettings.setAnnotations(m);
    }

    {
      io.ooni.mk.nettest.swig.VectorString v = new io.ooni.mk.nettest.swig.VectorString();
      for (String entry : settings.disabledEvents) {
        v.add(entry);
      }
      swigSettings.setDisabled_events(v);
    }
    {
      io.ooni.mk.nettest.swig.VectorString v = new io.ooni.mk.nettest.swig.VectorString();
      for (String entry : settings.inputs) {
        v.add(entry);
      }
      swigSettings.setInputs(v);
    }
    {
      io.ooni.mk.nettest.swig.VectorString v = new io.ooni.mk.nettest.swig.VectorString();
      for (String entry : settings.inputFilepaths) {
        v.add(entry);
      }
      swigSettings.setInput_filepaths(v);
    }

    swigSettings.setBouncer_base_url(settings.bouncerBaseUrl);
    swigSettings.setCollector_base_url(settings.collectorBaseUrl);
    swigSettings.setDns_nameserver(settings.dnsNameserver);
    swigSettings.setDns_engine(settings.dnsEngine);
    swigSettings.setGeoip_asn_path(settings.geoipAsnPath);
    swigSettings.setGeoip_country_path(settings.geoipCountryPath);
    swigSettings.setIgnore_bouncer_error(settings.ignoreBouncerError);
    swigSettings.setIgnore_open_report_error(settings.ignoreOpenReportError);
    swigSettings.setMax_runtime(settings.maxRuntime);
    swigSettings.setNet_ca_bundle_path(settings.netCaBundlePath);
    swigSettings.setNet_timeout(settings.netTimeout);
    swigSettings.setNo_bouncer(settings.noBouncer);
    swigSettings.setNo_collector(settings.noCollector);
    swigSettings.setNo_asn_lookup(settings.noAsnLookup);
    swigSettings.setNo_cc_lookup(settings.noCcLookup);
    swigSettings.setNo_ip_lookup(settings.noIpLookup);
    swigSettings.setNo_file_report(settings.noFileReport);
    swigSettings.setNo_resolver_lookup(settings.noResolverLookup);
    swigSettings.setProbe_asn(settings.probeAsn);
    swigSettings.setProbe_cc(settings.probeCc);
    swigSettings.setProbe_ip(settings.probeIp);
    swigSettings.setRandomize_input(settings.randomizeInput);
    swigSettings.setSave_real_probe_asn(settings.saveRealProbeAsn);
    swigSettings.setSave_real_probe_cc(settings.saveRealProbeCc);
    swigSettings.setSave_real_probe_ip(settings.saveRealProbeIp);
    swigSettings.setSave_real_resolver_ip(settings.saveRealResolverIp);
    swigSettings.setSoftware_name(settings.softwareName);
    swigSettings.setSoftware_version(settings.softwareVersion);
  }
}

