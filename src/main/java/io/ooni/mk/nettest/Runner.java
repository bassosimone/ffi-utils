// Part of Measurement Kit <https://measurement-kit.github.io/>.
// Measurement Kit is free software under the BSD license. See AUTHORS
// and LICENSE for more information on the copying conditions.

/*-
 *  __      __  _____ __________  _______  .___ _______    ________
 * /  \    /  \/  _  \\______   \ \      \ |   |\      \  /  _____/
 * \   \/\/   /  /_\  \|       _/ /   |   \|   |/   |   \/   \  ___
 *  \        /    |    \    |   \/    |    \   /    |    \    \_\  \
 *   \__/\  /\____|__  /____|_  /\____|__  /___\____|__  /\______  /
 *        \/         \/       \/         \/            \/        \/
 *
 * Autogenerated by measurement-kit/ffi-tools; DO NOT EDIT!
 *
 * See https://github.com/measurement-kit/ffi-tools for more information.
 */

package io.ooni.mk.nettest;

public class Runner {
  // Handlers
  // --------

  void onFailureAsnLookup(io.ooni.mk.nettest.event.FailureAsnLookup event) {
    // TODO: override this callback if you're interested
  }

  void onFailureCcLookup(io.ooni.mk.nettest.event.FailureCcLookup event) {
    // TODO: override this callback if you're interested
  }

  void onFailureIpLookup(io.ooni.mk.nettest.event.FailureIpLookup event) {
    // TODO: override this callback if you're interested
  }

  void onFailureMeasurement(io.ooni.mk.nettest.event.FailureMeasurement event) {
    // TODO: override this callback if you're interested
  }

  void onFailureMeasurementSubmission(io.ooni.mk.nettest.event.FailureMeasurementSubmission event) {
    // TODO: override this callback if you're interested
  }

  void onFailureReportCreate(io.ooni.mk.nettest.event.FailureReportCreate event) {
    // TODO: override this callback if you're interested
  }

  void onFailureReportClose(io.ooni.mk.nettest.event.FailureReportClose event) {
    // TODO: override this callback if you're interested
  }

  void onFailureResolverLookup(io.ooni.mk.nettest.event.FailureResolverLookup event) {
    // TODO: override this callback if you're interested
  }

  void onFailureStartup(io.ooni.mk.nettest.event.FailureStartup event) {
    // TODO: override this callback if you're interested
  }

  void onLog(io.ooni.mk.nettest.event.Log event) {
    // TODO: override this callback if you're interested
  }

  void onMeasurement(io.ooni.mk.nettest.event.Measurement event) {
    // TODO: override this callback if you're interested
  }

  void onStatusEnd(io.ooni.mk.nettest.event.StatusEnd event) {
    // TODO: override this callback if you're interested
  }

  void onStatusGeoipLookup(io.ooni.mk.nettest.event.StatusGeoipLookup event) {
    // TODO: override this callback if you're interested
  }

  void onStatusProgress(io.ooni.mk.nettest.event.StatusProgress event) {
    // TODO: override this callback if you're interested
  }

  void onStatusQueued(io.ooni.mk.nettest.event.StatusQueued event) {
    // TODO: override this callback if you're interested
  }

  void onStatusMeasurementStart(io.ooni.mk.nettest.event.StatusMeasurementStart event) {
    // TODO: override this callback if you're interested
  }

  void onStatusMeasurementSubmission(io.ooni.mk.nettest.event.StatusMeasurementSubmission event) {
    // TODO: override this callback if you're interested
  }

  void onStatusMeasurementDone(io.ooni.mk.nettest.event.StatusMeasurementDone event) {
    // TODO: override this callback if you're interested
  }

  void onStatusReportClose(io.ooni.mk.nettest.event.StatusReportClose event) {
    // TODO: override this callback if you're interested
  }

  void onStatusReportCreate(io.ooni.mk.nettest.event.StatusReportCreate event) {
    // TODO: override this callback if you're interested
  }

  void onStatusResolverLookup(io.ooni.mk.nettest.event.StatusResolverLookup event) {
    // TODO: override this callback if you're interested
  }

  void onStatusStarted(io.ooni.mk.nettest.event.StatusStarted event) {
    // TODO: override this callback if you're interested
  }

  void onStatusUpdatePerformance(io.ooni.mk.nettest.event.StatusUpdatePerformance event) {
    // TODO: override this callback if you're interested
  }

  void onStatusUpdateWebsites(io.ooni.mk.nettest.event.StatusUpdateWebsites event) {
    // TODO: override this callback if you're interested
  }

  void onTaskTerminated(io.ooni.mk.nettest.event.TaskTerminated event) {
    // TODO: override this callback if you're interested
  }

  // Runners
  // -------

  void runCaptivePortal(io.ooni.mk.nettest.settings.CaptivePortal settings) {
    io.ooni.mk.nettest.swig.CaptivePortal swigSettings = new io.ooni.mk.nettest.swig.CaptivePortal();
    /* No nettest specific options. */
    setCommonOptions(settings, swigSettings);
    Runner swigRunner = new RunnerWrapper(this);
    swigRunner.run_captive_portal(swigSettings);
  }

  void runDash(io.ooni.mk.nettest.settings.Dash settings) {
    io.ooni.mk.nettest.swig.Dash swigSettings = new io.ooni.mk.nettest.swig.Dash();
    /* No nettest specific options. */
    setCommonOptions(settings, swigSettings);
    Runner swigRunner = new RunnerWrapper(this);
    swigRunner.run_dash(swigSettings);
  }

  void runDnsInjection(io.ooni.mk.nettest.settings.DnsInjection settings) {
    io.ooni.mk.nettest.swig.DnsInjection swigSettings = new io.ooni.mk.nettest.swig.DnsInjection();
    /* No nettest specific options. */
    setCommonOptions(settings, swigSettings);
    Runner swigRunner = new RunnerWrapper(this);
    swigRunner.run_dns_injection(swigSettings);
  }

  void runFacebookMessenger(io.ooni.mk.nettest.settings.FacebookMessenger settings) {
    io.ooni.mk.nettest.swig.FacebookMessenger swigSettings = new io.ooni.mk.nettest.swig.FacebookMessenger();
    /* No nettest specific options. */
    setCommonOptions(settings, swigSettings);
    Runner swigRunner = new RunnerWrapper(this);
    swigRunner.run_facebook_messenger(swigSettings);
  }

  void runHttpHeaderFieldManipulation(io.ooni.mk.nettest.settings.HttpHeaderFieldManipulation settings) {
    io.ooni.mk.nettest.swig.HttpHeaderFieldManipulation swigSettings = new io.ooni.mk.nettest.swig.HttpHeaderFieldManipulation();
    /* No nettest specific options. */
    setCommonOptions(settings, swigSettings);
    Runner swigRunner = new RunnerWrapper(this);
    swigRunner.run_http_header_field_manipulation(swigSettings);
  }

  void runHttpInvalidRequestLine(io.ooni.mk.nettest.settings.HttpInvalidRequestLine settings) {
    io.ooni.mk.nettest.swig.HttpInvalidRequestLine swigSettings = new io.ooni.mk.nettest.swig.HttpInvalidRequestLine();
    /* No nettest specific options. */
    setCommonOptions(settings, swigSettings);
    Runner swigRunner = new RunnerWrapper(this);
    swigRunner.run_http_invalid_request_line(swigSettings);
  }

  void runMeekFrontedRequests(io.ooni.mk.nettest.settings.MeekFrontedRequests settings) {
    io.ooni.mk.nettest.swig.MeekFrontedRequests swigSettings = new io.ooni.mk.nettest.swig.MeekFrontedRequests();
    /* No nettest specific options. */
    setCommonOptions(settings, swigSettings);
    Runner swigRunner = new RunnerWrapper(this);
    swigRunner.run_meek_fronted_requests(swigSettings);
  }

  void runMultiNdt(io.ooni.mk.nettest.settings.MultiNdt settings) {
    io.ooni.mk.nettest.swig.MultiNdt swigSettings = new io.ooni.mk.nettest.swig.MultiNdt();
    /* No nettest specific options. */
    setCommonOptions(settings, swigSettings);
    Runner swigRunner = new RunnerWrapper(this);
    swigRunner.run_multi_ndt(swigSettings);
  }

  void runNdt(io.ooni.mk.nettest.settings.Ndt settings) {
    io.ooni.mk.nettest.swig.Ndt swigSettings = new io.ooni.mk.nettest.swig.Ndt();
    /* No nettest specific options. */
    setCommonOptions(settings, swigSettings);
    Runner swigRunner = new RunnerWrapper(this);
    swigRunner.run_ndt(swigSettings);
  }

  void runTcpConnect(io.ooni.mk.nettest.settings.TcpConnect settings) {
    io.ooni.mk.nettest.swig.TcpConnect swigSettings = new io.ooni.mk.nettest.swig.TcpConnect();
    /* No nettest specific options. */
    setCommonOptions(settings, swigSettings);
    Runner swigRunner = new RunnerWrapper(this);
    swigRunner.run_tcp_connect(swigSettings);
  }

  void runTelegram(io.ooni.mk.nettest.settings.Telegram settings) {
    io.ooni.mk.nettest.swig.Telegram swigSettings = new io.ooni.mk.nettest.swig.Telegram();
    /* No nettest specific options. */
    setCommonOptions(settings, swigSettings);
    Runner swigRunner = new RunnerWrapper(this);
    swigRunner.run_telegram(swigSettings);
  }

  void runWebConnectivity(io.ooni.mk.nettest.settings.WebConnectivity settings) {
    io.ooni.mk.nettest.swig.WebConnectivity swigSettings = new io.ooni.mk.nettest.swig.WebConnectivity();
    /* No nettest specific options. */
    setCommonOptions(settings, swigSettings);
    Runner swigRunner = new RunnerWrapper(this);
    swigRunner.run_web_connectivity(swigSettings);
  }

  void runWhatsapp(io.ooni.mk.nettest.settings.Whatsapp settings) {
    io.ooni.mk.nettest.swig.Whatsapp swigSettings = new io.ooni.mk.nettest.swig.Whatsapp();
    swigSettings.setAll_endpoints(settings.allEndpoints);
    setCommonOptions(settings, swigSettings);
    Runner swigRunner = new RunnerWrapper(this);
    swigRunner.run_whatsapp(swigSettings);
  }


  // Private stuff
  // -------------

  private void setCommonOptions(io.ooni.mk.nettest.settings.Common settings, io.ooni.mk.nettest.swig.Common swigSettings) {
    swigSettings.setLog_filepath(settings.logFilepath);
    swigSettings.setLog_level(settings.logLevel);
    swigSettings.setOutput_filepath(settings.outputFilepath);

    {
      io.ooni.mk.nettest.swig.MapStringString m = new io.ooni.mk.nettest.swig.MapStringString();
      for (String key : settings.annotations.keySet()) {
        String value = settings.annotations.get(key);
        m.set(key, value);
      }
      swigSettings.setAnnotations(m);
    }

    {
      io.ooni.mk.nettest.swig.VectorString v = new io.ooni.mk.nettest.swig.VectorString();
      for (String entry : settings.disabledEvents) {
        v.add(entry);
      }
      swigSettings.setDisabled_events(v);
    }
    {
      io.ooni.mk.nettest.swig.VectorString v = new io.ooni.mk.nettest.swig.VectorString();
      for (String entry : settings.inputs) {
        v.add(entry);
      }
      swigSettings.setInputs(v);
    }
    {
      io.ooni.mk.nettest.swig.VectorString v = new io.ooni.mk.nettest.swig.VectorString();
      for (String entry : settings.inputFilepaths) {
        v.add(entry);
      }
      swigSettings.setInput_filepaths(v);
    }

    swigSettings.setBouncer_base_url(settings.bouncerBaseUrl);
    swigSettings.setCollector_base_url(settings.collectorBaseUrl);
    swigSettings.setDns_nameserver(settings.dnsNameserver);
    swigSettings.setDns_engine(settings.dnsEngine);
    swigSettings.setGeoip_asn_path(settings.geoipAsnPath);
    swigSettings.setGeoip_country_path(settings.geoipCountryPath);
    swigSettings.setIgnore_bouncer_error(settings.ignoreBouncerError);
    swigSettings.setIgnore_open_report_error(settings.ignoreOpenReportError);
    swigSettings.setMax_runtime(settings.maxRuntime);
    swigSettings.setNet_ca_bundle_path(settings.netCaBundlePath);
    swigSettings.setNet_timeout(settings.netTimeout);
    swigSettings.setNo_bouncer(settings.noBouncer);
    swigSettings.setNo_collector(settings.noCollector);
    swigSettings.setNo_asn_lookup(settings.noAsnLookup);
    swigSettings.setNo_cc_lookup(settings.noCcLookup);
    swigSettings.setNo_ip_lookup(settings.noIpLookup);
    swigSettings.setNo_file_report(settings.noFileReport);
    swigSettings.setNo_resolver_lookup(settings.noResolverLookup);
    swigSettings.setProbe_asn(settings.probeAsn);
    swigSettings.setProbe_cc(settings.probeCc);
    swigSettings.setProbe_ip(settings.probeIp);
    swigSettings.setRandomize_input(settings.randomizeInput);
    swigSettings.setSave_real_probe_asn(settings.saveRealProbeAsn);
    swigSettings.setSave_real_probe_cc(settings.saveRealProbeCc);
    swigSettings.setSave_real_probe_ip(settings.saveRealProbeIp);
    swigSettings.setSave_real_resolver_ip(settings.saveRealResolverIp);
    swigSettings.setSoftware_name(settings.softwareName);
    swigSettings.setSoftware_version(settings.softwareVersion);
  }
}

