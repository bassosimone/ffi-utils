#!/usr/bin/env python

from __future__ import print_function

import importlib
import json
import logging
import os
import sys

def print_class_attribute(nettest_mod, name, value):
    """ Prints a class attribute """
    if isinstance(value, getattr(nettest_mod, "BooleanType")):
        print("  bool " + name + " = " + ("true" if value.value else "false") + ";")
    elif isinstance(value, getattr(nettest_mod, "DoubleType")):
        print("  double " + name + " = " + json.dumps(value.value) + ";")
    elif isinstance(value, getattr(nettest_mod, "LongType")):
        print("  uint64_t " + name + " = " + json.dumps(value.value) + ";")
    elif isinstance(value, getattr(nettest_mod, "MapStringStringType")):
        print("  std::map<std::string, std::string> " + name + ";")
    elif isinstance(value, getattr(nettest_mod, "Options")):
        print("  Options " + name + ";")
    elif isinstance(value, getattr(nettest_mod, "StringType")):
        print("  std::string " + name + " = " + json.dumps(value.value) + ";")
    elif isinstance(value, getattr(nettest_mod, "VectorStringType")):
        print("  std::vector<std::string> " + name + ";")
    else:
        print("  //", value, name)

def main():
    """ Main function """
    sys.path.insert(0, os.path.dirname(os.path.abspath(sys.argv[0])))
    nettest_mod = importlib.import_module("nettest", package=__name__)
    print("// Autogenerated by ffi/cxx.py; DO NOT EDIT!")
    print("#ifndef MEASUREMENT_KIT_CXX11_HPP")
    print("")

    types = [name for name in dir(nettest_mod) if name.endswith("Type")]
    print("#include <stdint.h>")
    print("")
    print("#include <map>")
    print("#include <string>")
    print("#include <vector>")
    print("")
    print("namespace mk {")
    print("namespace cxx11 {")
    print("")

    events = [name for name in dir(nettest_mod) if name.endswith("Event")]
    for event_name in events:
        print("class " + event_name + " {")
        print(" public:")
        instance = getattr(nettest_mod, event_name)()
        for name in dir(instance):
            if name.startswith("_") or name == "key":
                continue
            value = getattr(instance, name)
            print_class_attribute(nettest_mod, name, value)
        print("};")
        print("")

    print("class Options {")
    print(" public:")
    options_instance = getattr(nettest_mod, "Options")()
    for name in dir(options_instance):
        if name.startswith("_"):
            continue
        value = getattr(options_instance, name)
        print_class_attribute(nettest_mod, name, value)
    print("};")
    print("")

    print("class Settings {")
    print(" public:")
    settings_instance = getattr(nettest_mod, "Settings")()
    for name in dir(settings_instance):
        if name.startswith("_"):
            continue
        value = getattr(settings_instance, name)
        print_class_attribute(nettest_mod, name, value)
    print("};")
    print("")

    print("class Nettest {")
    print(" public:")
    nettest_instance = getattr(nettest_mod, "Nettest")()
    for event in nettest_instance.events:
        print("  virtual void on_" + event.key.replace(".", "_") + "(const " +
              event.__class__.__name__ + " &) {")
        print("    // TODO: override")
        print("  }")
        print("")
    print("  Nettest() noexcept {}")
    print("")
    print("  explicit Nettest(Settings s) noexcept {")
    print("    std::swap(s, settings_);")
    print("  }")
    print("")
    print("  void run() const;")
    print("")
    print("  virtual ~Nettest() noexcept;")
    print("")
    print(" private:")
    print("  Settings settings_;")
    print("};")
    print("")
    print("Nettest::~Nettest() noexcept {}")
    print("")


    print("void Nettest::run() const {")
    print("  nlohmann::json cxx_settings;")

    print("  {")
    for name in dir(settings_instance):
        if name.startswith("_"):
            continue
        value = getattr(settings_instance, name)
        if isinstance(value, getattr(nettest_mod, "BooleanType")):
            print("    cxx_settings[\"" + name + "\"] = (settings_." + name + ") ? 1 : 0;")
        elif isinstance(value, getattr(nettest_mod, "Options")):
            pass
        else:
            print("    cxx_settings[\"" + name + "\"] = settings_." + name + ";")
    print("  }")

    print("  {")
    for name in dir(options_instance):
        if name.startswith("_"):
            continue
        value = getattr(options_instance, name)
        if isinstance(value, getattr(nettest_mod, "BooleanType")):
            print("    cxx_settings[\"options\"][\"" + options_instance.name_to_mkname(name)
                  + "\"] = (settings_." + name + ") ? 1 : 0;")
        else:
            print("    cxx_settings[\"options\"][\"" + options_instance.name_to_mkname(name)
                  + "\"] = settings_." + name + ";")
    print("  }")
    print("  auto nettest = mk::nettest::make_unique(cxx_settings.dump().c_str());")
    print("  for (const char *str; (str = mk::nettest::next(nettest) != nullptr;) {")
    print("    auto ev = nlohmann::json(str);")
    for event in nettest_instance.events:
        print("    if (ev.at(\"key\") == " + json.dumps(event.key) + ") {")
        print("      " + event.__class__.__name__ + " event;")
        for name in dir(event):
            if name.startswith("_") or name == "key":
                continue
            value = getattr(event, name)
            print("      event." + name + " = event.at(\"value\").at(\"" + name + "\");")
        print("      on_" + event.key.replace(".", "_") + "(event);")
        print("      continue;")
        print("    }")
    print("  }")

    print("}")
    print("")


    print("} // namespace cxx11")
    print("} // namespace mk")
    print("#endif // MEASUREMENT_KIT_CXX11_HPP")

if __name__ == "__main__":
    main()
