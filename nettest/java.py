#!/usr/bin/env python

from __future__ import print_function

import importlib
import json
import logging
import os
import sys

def print_class_attribute(nettest_mod, name, value):
    """ Prints a class attribute """
    if isinstance(value, getattr(nettest_mod, "BooleanType")):
        print("  public boolean " + name + " = " + ("true" if value.value else "false") + ";")
    elif isinstance(value, getattr(nettest_mod, "DoubleType")):
        print("  public double " + name + " = " + json.dumps(value.value) + ";")
    elif isinstance(value, getattr(nettest_mod, "LongType")):
        print("  public long " + name + " = " + json.dumps(value.value) + ";")
    elif isinstance(value, getattr(nettest_mod, "MapStringStringType")):
        print("  public java.util.Map<String, String> " + name + " = new java.util.HashMap<String, String>();")
    elif isinstance(value, getattr(nettest_mod, "Options")):
        print("  public Options " + name + " = new Options();")
    elif isinstance(value, getattr(nettest_mod, "StringType")):
        print("  public String " + name + " = " + json.dumps(value.value) + ";")
    elif isinstance(value, getattr(nettest_mod, "VectorStringType")):
        print("  public java.util.Vector<String> " + name + " = new java.util.Vector<String>();")
    else:
        print("  //", value, name)

def begin_file(name):
    print("// - - - BEGIN FILE " + name + " - - -")
    print("// Autogenerated by measurement-kit/ffi tools; DO NOT EDIT!")
    print("")
    print("package org.openobservatory.measurement_kit.nettest;")
    print("")

def end_file(name):
    print("// - - - END FILE " + name + " - - -")

def main():
    """ Main function """
    sys.path.insert(0, os.path.dirname(os.path.abspath(sys.argv[0])))
    nettest_mod = importlib.import_module("nettest", package=__name__)

    events = [name for name in dir(nettest_mod) if name.endswith("Event")]
    for event_name in events:
        instance = getattr(nettest_mod, event_name)()
        begin_file(instance.__class__.__name__ + ".java")
        print("public class " + event_name + " {")
        for name in dir(instance):
            if name.startswith("_") or name == "key":
                continue
            value = getattr(instance, name)
            print_class_attribute(nettest_mod, name, value)
        print("}")
        end_file(instance.__class__.__name__ + ".java")

    begin_file("Options.java")
    print("public class Options {")
    options_instance = getattr(nettest_mod, "Options")()
    for name in dir(options_instance):
        if name.startswith("_"):
            continue
        value = getattr(options_instance, name)
        print_class_attribute(nettest_mod, name, value)
    print("}")
    end_file("Options.java")

    begin_file("Settings.java")
    print("public class Settings {")
    settings_instance = getattr(nettest_mod, "Settings")()
    for name in dir(settings_instance):
        if name.startswith("_"):
            continue
        value = getattr(settings_instance, name)
        print_class_attribute(nettest_mod, name, value)
    print("}")
    end_file("Settings.java")

    begin_file("Nettest.java")
    print("public class Nettest {")
    nettest_instance = getattr(nettest_mod, "Nettest")()
    for event in nettest_instance.events:
        print("  protected void on_" + event.key.replace(".", "_") + "(" +
              event.__class__.__name__ + " event) {")
        print("    // TODO: override")
        print("  }")
        print("")
    print("  public Nettest() {}")
    print("")
    print("  public Nettest(Settings s) {")
    print("    settings_ = s;")
    print("  }")
    print("")
    print("  public void run() {")

    print("    org.openobservatory.measurement_kit.nettest.swig.Settings swigSettings = new org.openobservatory.measurement_kit.nettest.swig.Settings();")
    print("    {")
    for name in dir(settings_instance):
        if name.startswith("_"):
            continue
        value = getattr(settings_instance, name)
        if isinstance(value, getattr(nettest_mod, "MapStringStringType")):
            print("      {")
            print("        org.openobservatory.measurement_kit.nettest.swig.MapStringString mss = new org.openobservatory.measurement_kit.nettest.swig.MapStringString();")
            print("        for (String key : settings_." + name + ") {")
            print("          String value = settings_." + name + ".get(key);")
            print("          mss.set(key, value);")
            print("        }")
            print("        swigSettings.set" + name.capitalize() + "(mss);")
            print("      }")
        elif isinstance(value, getattr(nettest_mod, "Options")):
            pass
        elif isinstance(value, getattr(nettest_mod, "VectorStringType")):
            print("      {")
            print("        org.openobservatory.measurement_kit.nettest.swig.VectorString vs = new org.openobservatory.measurement_kit.nettest.swig.VectorString();")
            print("        for (String entry : settings_." + name + ") {")
            print("          vs.add(entry);")
            print("        }")
            print("        swigSettings.set" + name.capitalize() + "(vs);")
            print("      }")
        else:
            print("      swigSettings.set" + name.capitalize() + "(settings_." + name + ");")
    print("    }")

    print("    {")
    print("      org.openobservatory.measurement_kit.nettest.swig.Options swigOptions = new org.openobservatory.measurement_kit.nettest.swig.Options();")
    for name in dir(options_instance):
        if name.startswith("_"):
            continue
        value = getattr(options_instance, name)
        if isinstance(value, getattr(nettest_mod, "Options")):
            pass
        elif (isinstance(value, getattr(nettest_mod, "BooleanType")) or
              isinstance(value, getattr(nettest_mod, "DoubleType")) or
              isinstance(value, getattr(nettest_mod, "LongType")) or
              isinstance(value, getattr(nettest_mod, "StringType"))):
            print("      swigSettings.set" + name.capitalize() + "(settings_." + name + ");")
        else:
            print("      //", value, name)
    print("      swigSettings.setOptions(swigOptions);")
    print("    }")

    print("    NettestWrapper wrapper = NettestWrapper(this, swigSettings);")
    print("    wrapper.run();")
    print("  }")
    print("")

    print("  class NettestWrapper extends org.openobservatory.measurement_kit.swig.Nettest {")
    print("    NettestWrapper(Nettest parent, org.openobservatory.measurement_kit.swig.Settings settings) {")
    print("      super(settings);")
    print("      parent_ = parent;")
    print("    }")
    print("")
    for event in nettest_instance.events:
        print("    protected void on_" + event.key.replace(".", "_") + "(" +
              "org.openobservatory.measurement_kit.swig." + event.__class__.__name__ + " swigEvent) {")
        print("      " + event.__class__.__name__ + " event = new " + event.__class__.__name__ + "();")
        for name in dir(event):
            if name.startswith("_") or name == "key":
                continue
            print("      event." + name + " = swigEvent.get" + name.capitalize() + "();")
        print("      parent_->on_" + event.key.replace(".", "_") + "(event);")
        print("    }")
        print("")
    print("    private Nettest parent_;")
    print("  }")
    print("")

    print("  private Settings settings_ = new Settings();")
    print("}")
    end_file("Nettest.java")

if __name__ == "__main__":
    main()
